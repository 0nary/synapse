<div class="modal fade @(Active ? "show d-block" : "d-none")" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered @modalSizeClass" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                @if (ShowCloseIcon)
                {
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Hide">
                        <span aria-hidden="true">&times;</span>
                    </button>
                }
                
            </div>
            <div class="modal-body">
                @Body
            </div>
            <div class="modal-footer btn-group d-flex">
                @Footer
            </div>
        </div>
    </div>
</div>

@if (Active)
{
    <div class="modal-backdrop fade show"></div>
}

@code 
{

    [Parameter]
    public ModalSize Size { get; set; } = ModalSize.Large;

    [Parameter]
    public RenderFragment Title { get; set; }

    [Parameter]
    public RenderFragment Body { get; set; }

    [Parameter]
    public RenderFragment Footer { get; set; }

    [Parameter]
    public bool ShowCloseIcon { get; set; } = true;

    public bool Active { get; private set; }

    private string modalSizeClass => this.Size switch
    {
        ModalSize.Small => "modal-sm",
        ModalSize.Default => "",
        ModalSize.Large => "modal-lg",
        ModalSize.ExtraLarge => "modal-xl",
        _ => throw new NotSupportedException($"The specified {nameof(ModalSize)} '{this.Size}' is not supported")
    };

    public void Toggle()
    {
        this.Active = !this.Active;
        this.StateHasChanged();
    }

    public void Show()
    {
        this.Active = true;
        this.StateHasChanged();
    }

    public void Hide()
    {
        this.Active = false;
        this.StateHasChanged();
    }

}
