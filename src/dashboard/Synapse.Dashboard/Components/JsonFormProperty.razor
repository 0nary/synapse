@using Newtonsoft.Json.Schema

@if(!string.IsNullOrWhiteSpace(Name) 
    && Schema != null)
{
    <div>
        @switch (Schema.Type)
        {
            case JSchemaType.Array:
                //todo
                break;
            case JSchemaType.Boolean:
                <div class="form-check">
                    <input name="@Name" class="form-check-input" type="checkbox" value="@Value">
                    <label for="@Name" class="form-check-label">@displayName</label>
                </div>
                break;
            case JSchemaType.Integer:
                <label for="@Name" class="form-label">@displayName</label>
                <input name="@Name" title="@Schema.Description" placeholder="@displayName" min="@Schema.Minimum" max="@Schema.Maximum" multiple="@Schema.MultipleOf" required="@Schema.Required" value="@Value" class="form-control" />
                break;
            case JSchemaType.Number:
                <label for="@Name" class="form-label">@displayName</label>    
                <input name="@Name" title="@Schema.Description" placeholder="@displayName" min="@Schema.Minimum" max="@Schema.Maximum" multiple="@Schema.MultipleOf" required="@Schema.Required" value="@Value" class="form-control" />
                break;
            case JSchemaType.Object:
                <label for="@Name" class="form-label">@displayName</label>    
                <JsonForm Schema="@Schema" Model="@Value" />
                break;
            case JSchemaType.String:
                <label for="@Name" class="form-label">@displayName</label>
                @if(Schema.Enum != null && Schema.Enum.Any())
                {
                    <select name="@Name" title="@Schema.Description" readonly="@Schema.ReadOnly" value="@Value" class="form-control" >
                        @foreach (var option in Schema.Enum)
                        {
                            <option value="@option">@option</option>
                        }
                    </select>
                }
                else
                {
                    <input name="@Name" title="@Schema.Description" placeholder="@displayName" maxlength="@Schema.MaximumLength" pattern="@Schema.Pattern" required="@Schema.Required" readonly="@Schema.ReadOnly" value="@Value" class="form-control" />
                }
                break;
        }
    </div>
}

@code 
{

    [CascadingParameter]
    private JsonForm Form { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public JSchema Schema { get; set; }

    [Parameter]
    public object Value { get; set; }

    private string displayName => string.IsNullOrWhiteSpace(this.Schema.Title) ? this.Name : this.Schema.Title;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.Form.AddProperty(this);
    }

}
