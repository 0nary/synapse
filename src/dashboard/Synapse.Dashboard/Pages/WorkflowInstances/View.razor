@page "/workflows/{workflowId}/{workflowInstanceId}"
@using Blazor.Diagrams.Core
@using Microsoft.AspNetCore.SignalR.Client
@using Neuroglia.Serialization
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Newtonsoft.Json.Schema
@using Synapse.Dashboard.Components
@using Synapse.Integration.Models
@using Synapse.Integration.Services
@using Synapse.Ports.WebSockets.Client.Models
@using Synapse.Ports.WebSockets.Client.Services
@using System.Text
@inject ISynapseApi SynapseApi
@inject IJsonSerializer JsonSerializer
@inject IWorkflowDiagramBuilder WorkflowDiagramBuilder
@inject HubConnection HubConnection
@inject HttpClient HttpClient

<PageTitle>@workflowInstance?.Id</PageTitle>
<AppHeader>
      <div>
        <div class="border rounded-pill border-dark px-3 py-1 d-inline">
            <span class="h5 m-0 p-0">@workflowInstance?.WorkflowId</span>
        </div>
        <div class="border rounded-pill bg-dark border-dark text-white px-3 py-1 d-inline">
            <span class="h5 m-0 p-0">@workflowInstance?.Key</span>
        </div>
    </div>
</AppHeader>

@if (workflowInstance != null)
{
    <div class="container-fluid h-100">
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">Details</h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Workflow Id</label>
                                <input type="text" class="form-control" readonly value="@workflowInstance.WorkflowId" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Activation Type</label>
                                <input type="text" class="form-control" readonly value="@workflowInstance.ActivationType" />
                            </div>
                        </div>
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Key</label>
                                <input type="text" class="form-control" readonly value="@workflowInstance.Key" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Created at</label>
                                <input type="text" class="form-control" readonly value="@workflowInstance.CreatedAt" />
                            </div>
                        </div>
                        <div class="row g-3">
                            <div class="col-md-4">
                                <label class="form-label">Started at</label>
                                <input type="text" class="form-control" readonly value="@workflowInstance.StartedAt" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Executed at</label>
                                <input type="text" class="form-control" readonly value="@workflowInstance.ExecutedAt" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Duration</label>
                                <input type="text" class="form-control" readonly value="@workflowInstance.Duration" />
                            </div>
                        </div>
                        <div>
                            <label class="form-label">Input data</label>
                            <MonacoEditor
                                @ref="workflowInputEditor"
                                CssClass="monaco-extra-small"
                                ConstructionOptions="GetWorkflowEditorOptions" />
                        </div>
                        <div>
                            <label class="form-label">Output data</label>
                            <MonacoEditor
                                @ref="workflowOutputEditor"
                                CssClass="monaco-extra-small"
                                ConstructionOptions="GetWorkflowEditorOptions" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">History</h5>
                    </div>
                    <div class="card-body">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th scope="col"></th>
                                    <th scope="col">Type</th>
                                    <th scope="col">Status</th>
                                    <th scope="col">Started At</th>
                                    <th scope="col">Executed At</th>
                                    <th scope="col">Duration</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach(var activity in sortedActivities)
                                {
                                    <ExpandableDataRow @ref="rows[sortedActivities.IndexOf(activity)]">
                                        <Title>
                                            <td>
                                                @if (rows[sortedActivities.IndexOf(activity)].IsExpanded)
                                                {
                                                    <span class="oi oi-chevron-top"></span>
                                                } else
                                                {
                                                    <span class="oi oi-chevron-bottom"></span>
                                                }
                                            </td>
                                            <td>@activity.Type</td>
                                            <td>@activity.Status</td>
                                            <td>@activity.StartedAt?.ToString("MM/dd/yyyy, HH:mm")</td>
                                            <td>@activity.ExecutedAt?.ToString("MM/dd/yyyy, HH:mm")</td>
                                            <td>@activity.Duration</td>
                                        </Title>
                                        <Body>
                                        <td colspan="5">
                                            <div class="row">
                                                <div class="col-6">
                                                    <p class="font-weight-bold">Input</p>
                                                    @if(activity.Input != null)
                                                    {
                                                        <MonacoEditor 
                                                            CssClass="monaco-small"
                                                            ConstructionOptions="GetReadOnlyEditorOptions(JsonConvert.SerializeObject(activity.Input, Formatting.Indented))" />
                                                    }
                                                </div>
                                                <div class="col-6">
                                                    <p class="font-weight-bold">Output</p>
                                                    @if(activity.Output != null)
                                                    {
                                                        <MonacoEditor 
                                                            CssClass="monaco-small"
                                                            ConstructionOptions="GetReadOnlyEditorOptions(JsonConvert.SerializeObject(activity.Output, Formatting.Indented))" />
                                                    }
                                                    @if(activity.Error != null)
                                                    {
                                                        <MonacoEditor                                                 
                                                            CssClass="monaco-small"
                                                            ConstructionOptions="GetReadOnlyEditorOptions(JsonConvert.SerializeObject(activity.Error, Formatting.Indented))" />
                                                    }
                                                </div>
                                            </div>
                                        </td>
                                        </Body>
                                    </ExpandableDataRow>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <Modal @ref="errorModal">
        <Title>Error</Title>
        <Body>
            <p>An error occured:</p>
            <div class="border rounded bg-danger text-white text-break p-1">@((MarkupString)error)</div>
        </Body>
        <Footer>
            <button @onclick="() => errorModal.Hide()" class="btn btn-secondary">Close</button>
        </Footer>
    </Modal>
}
else
{
    <p>Loading...</p>
}
@code
{

    [Parameter]
    public string WorkflowId { get; set; } = null!;
    [Parameter]
    public string WorkflowInstanceId { get; set; } = null!;

    private Modal errorModal = null!;
    private string error = null!;
    private V1WorkflowInstanceDto workflowInstance = null!;
    private MonacoEditor workflowInputEditor = null!;
    private MonacoEditor workflowOutputEditor = null!;
    private List<V1WorkflowActivityDto> sortedActivities = new List<V1WorkflowActivityDto>();
    private Dictionary<int, ExpandableDataRow> rows = new Dictionary<int, ExpandableDataRow>();

    private StandaloneEditorConstructionOptions GetWorkflowEditorOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions 
        {
		    AutomaticLayout = true,
		    Language = "json",
            Minimap = new EditorMinimapOptions { Enabled = false },
            ReadOnly = true
	    };
    }

    private Func<MonacoEditor, StandaloneEditorConstructionOptions> GetReadOnlyEditorOptions(string value)
    {
        return (MonacoEditor editor) => new StandaloneEditorConstructionOptions 
        {
		    AutomaticLayout = true,
		    Language = "json",
            Minimap = new EditorMinimapOptions { Enabled = false },
            ReadOnly = true,
            Value = value
	    };
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.workflowInstance = await this.SynapseApi.GetWorkflowInstanceByIdAsync(this.WorkflowInstanceId);
        this.sortedActivities = this.workflowInstance.Activities.OrderBy(a => a.StartedAt).ToList();
        this.StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        var json = string.Empty;
        if (this.workflowInstance.Input != null) {
            json = JsonConvert.SerializeObject(this.workflowInstance.Input, Formatting.Indented);
            await this.workflowInputEditor.SetValue(json);
        }
        if (this.workflowInstance.Output != null) {
            json = JsonConvert.SerializeObject(this.workflowInstance.Output, Formatting.Indented);
            await this.workflowOutputEditor.SetValue(json);
        }
        json = string.Empty;
        if (this.workflowInstance.Error != null) {
            json = JsonConvert.SerializeObject(this.workflowInstance.Error, Formatting.Indented);
            await this.workflowOutputEditor.SetValue(json);
        }
        await base.OnParametersSetAsync();
        this.StateHasChanged();
    }

}