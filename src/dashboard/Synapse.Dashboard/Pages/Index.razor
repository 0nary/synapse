@namespace Synapse.Dashboard
@page "/"
@using Neuroglia.Blazor.Dagre
@using Neuroglia.Blazor.Dagre.Models
@using Synapse.Dashboard.Features.Test
@using System.Dynamic
@using System.Collections.ObjectModel
@inject IBreadcrumbService BreadcrumbService
@inject DagreService Dagre

<PageTitle>Overview</PageTitle>
<AppHeader>
    <span class="h5 m-0 p-0">Overview</span>
</AppHeader>

Welcome to Synapse - Serverless Workflow Management System

<Counter />

<Table Items="@users">
    <RowTemplate Context="row">
        <Expander HeaderContainerTagName="tr" BodyContainerTagName="tr">
            <HeaderTemplate Context="header">@header.Header</HeaderTemplate>
            <Header>
                <ColumnHeaderCollectionPresenter T="TestUserState" />
            </Header>
            <Body>
                <td colspan="100%">Some exapandable content</td>
            </Body>
        </Expander>
    </RowTemplate>
    <Columns>
        <Column T="TestUserState" Name="Test">
            <CellTemplate Context="context">
                <div class="badge rounded-pill bg-primary">Some value</div>
            </CellTemplate>
        </Column>
    </Columns>
</Table>

<DagreGraph Graph="graph" />

@code{

    private List<TestUserState> users = new() { new("FakeFirstName", "Fake Last Name", "fake@email.com"), new("FakeFirstName", "Fake Last Name", "fake@email.com") };

    protected IGraphViewModel graph = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.BreadcrumbService.Use(KnownBreadcrumbs.Home);
        var start = new NodeViewModel("", "start-node", NodeShape.Circle, 20, 20)
        {
            PaddingX = 0,
            PaddingY = 0,
            Metadata = new Dictionary<string, object>()
            {
                { "Type", "Start" },
            }
        };
        var action1 = new NodeViewModel("Action 1")
        {
            Metadata = new Dictionary<string, object>()
            {
                { "Type", "Action" },
            }
        };
        var state1 = new StateVM(
            new Dictionary<Guid, INodeViewModel>() { 
                { action1.Id, action1 }
            }, 
            "State 1"
        );
        var action2 = new NodeViewModel("Action 2")
        {
            Metadata = new Dictionary<string, object>()
            {
                { "Type", "Action" },
            }
        };
        var action3 = new NodeViewModel("Action 3")
        {
            Metadata = new Dictionary<string, object>()
            {
                { "Type", "Action" },
            }
        };
        var state2 = new StateVM(
            new Dictionary<Guid, INodeViewModel>() { 
                { action2.Id, action2 },
                { action3.Id, action3 },
            }, 
            "State 2"
        );
        var end = new NodeViewModel("", "end-node", NodeShape.Circle, 20, 20)
        {
            PaddingX = 0,
            PaddingY = 0,
            Metadata = new Dictionary<string, object>()
            {
                { "Type", "End" },
            }
        };
        var edge1 = new EdgeViewModel(start.Id, action1.Id)
        {
            Label = "Test"
        };
        var edge2 = new EdgeViewModel(start.Id, action2.Id);
        var edge3 = new EdgeViewModel(start.Id, action3.Id);
        var edge4 = new EdgeViewModel(action1.Id, end.Id);
        var edge5 = new EdgeViewModel(action2.Id, end.Id);
        var edge6 = new EdgeViewModel(action3.Id, end.Id);
        var nodes = new Dictionary<Guid, INodeViewModel>()
        {
            { start.Id, start },
            //{ action1.Id, action1 },
            //{ action2.Id, action2 },
            //{ action3.Id, action3 },
            { end.Id, end }
        };
        var edges = new Dictionary<Guid, IEdgeViewModel>()
        {
            { edge1.Id, edge1 },
            { edge2.Id, edge2 },
            { edge3.Id, edge3 },
            { edge4.Id, edge4 },
            { edge5.Id, edge5 },
            { edge6.Id, edge6 }
        };
        var clusters = new Dictionary<Guid, IClusterViewModel>()
        {
            { state1.Id, state1 },
            { state2.Id, state2 }
        };
        var graph = new GraphViewModel(nodes, edges, clusters);
        //await graph.RegisterComponentType<StateVM, Pages.StateTemplate>();
        this.graph = graph;
    }

    public class TestUserState
    {

        public TestUserState(string firstName, string lastName, string email)
        {
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Email = email;
        }

        public string FirstName{ get; }

        public string LastName{ get; }

        public string Email { get; }

    }

}