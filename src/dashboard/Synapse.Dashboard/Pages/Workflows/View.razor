@page "/workflows/{workflowId}"
@using Blazor.Diagrams.Core
@using Microsoft.AspNetCore.SignalR.Client
@using Neuroglia.Serialization
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Newtonsoft.Json.Schema
@using Synapse.Dashboard.Components
@using Synapse.Integration.Models
@using Synapse.Integration.Services
@using Synapse.Ports.WebSockets.Client.Models
@using Synapse.Ports.WebSockets.Client.Services
@using System.Text
@inject ISynapseApi SynapseApi
@inject IJsonSerializer JsonSerializer
@inject IWorkflowDiagramBuilder WorkflowDiagramBuilder
@inject HubConnection HubConnection
@inject HttpClient HttpClient

<PageTitle>@workflow?.Id</PageTitle>
<AppHeader>
    <span class="h5 m-0 p-0">@workflow?.Id</span>
    <button @onclick="OnShowWorkflowInputModal" class="btn btn-primary" title="Start workflow"><span class="oi oi-media-play"></span></button>
</AppHeader>

@if (workflow != null)
{
    <div class="container-fluid h-100">
        <div class="row h-50 position-relative">
            <WorkflowDiagram Diagram="diagram" />
            <div class="show-definition text-end">
                <button type="button" @onclick="OnShowWorkflowDefinitionModal" class="btn btn-outline-dark" title="Detailed definition"><span class="oi oi-info"></span></button>
            </div>
        </div>
        <div class="row h-50 border border-dark">
            <TabControl>
                <TabPage Header="Instances">
                    <DataTable DataSource="instances">
                        <Columns>
                            <DataColumnProperties 
                                Name="Key"
                                ValueProvider="source => ((V1WorkflowInstanceDto)source).Key"
                                PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstanceDto.Key))" />
                            <DataColumnProperties 
                                Name="Status"
                                ValueProvider="source => ((V1WorkflowInstanceDto)source).Status"
                                PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstanceDto.Status))" />
                            <DataColumnProperties 
                                Name="Started at"
                                ValueProvider="source => ((V1WorkflowInstanceDto)source).StartedAt"
                                PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstanceDto.StartedAt))"
                                Format="MM/dd/yyyy, HH:mm"/>
                            <DataColumnProperties 
                                Name="Executed at"
                                ValueProvider="source => ((V1WorkflowInstanceDto)source).ExecutedAt"
                                PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstanceDto.ExecutedAt))"
                                Format="MM/dd/yyyy, HH:mm"/>
                            <DataColumnProperties 
                                Name="Duration"
                                ValueProvider="source => ((V1WorkflowInstanceDto)source).Duration"
                                IsSorteable="false"
                                IsFilterable="false"/>
                        </Columns>
                    </DataTable>
                </TabPage>
            </TabControl>
        </div>
    </div>
    <Modal @ref="errorModal">
        <Title>Error</Title>
        <Body>
            <p>An error occured:</p>
            <div class="border rounded bg-danger text-white text-break p-1">@((MarkupString)error)</div>
        </Body>
        <Footer>
            <button @onclick="() => errorModal.Hide()" class="btn btn-secondary">Close</button>
        </Footer>
    </Modal>
    <Modal @ref="workflowInputModal">
        <Title>Start new instance</Title>
        <Body>
            <MonacoEditor
                @ref="workflowInputEditor"
                CssClass="monaco-small"
                ConstructionOptions="GetWorkflowInputEditorOptions"/>
        </Body>
        <Footer>
            <button @onclick="() => workflowInputModal.Hide()" class="btn btn-secondary">Cancel</button>
            <button @onclick="OnStartWorkflowAsync" class="btn btn-primary">Start</button>
        </Footer>
    </Modal>
    <Modal @ref="workflowDefinitionModal">
        <Title>Workflow definition</Title>
        <Body>
            <MonacoEditor
                @ref="workflowDefinitionEditor"
                CssClass="monaco-small"
                ConstructionOptions="GetWorkflowDefinitionEditorOptions"/>
        </Body>
        <Footer>
            <button @onclick="() => workflowDefinitionModal.Hide()" class="btn btn-secondary">Close</button>
        </Footer>
    </Modal>
}
else
{
    <p>Loading...</p>
}
@code
{

    [Parameter]
    public string WorkflowId { get; set; } = null!;

    private Modal errorModal = null!;
    private Modal workflowInputModal = null!;
    private Modal workflowDefinitionModal = null!;
    private MonacoEditor workflowInputEditor = null!;
    private MonacoEditor workflowDefinitionEditor = null!;
    private V1WorkflowDto workflow = null!;
    private Diagram diagram { get; set; } = null!;
    private IQueryable<V1WorkflowInstanceDto> instances = null!;
    private string error = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.workflow = await this.SynapseApi.GetWorkflowByIdAsync(this.WorkflowId);
        this.diagram = await this.WorkflowDiagramBuilder.BuildDiagram(this.workflow.Definition);
        this.instances = await this.FetchWorkflowInstancesAsync();
        this.diagram.DisplayActivityStatusFor(this.instances);
        this.HubConnection.On<CloudEventDescriptor>(nameof(ISynapseWebSocketApiClient.PublishIntegrationEvent), this.OnIntegrationEvent);
        this.StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        await this.workflowInputEditor.SetValue(string.Empty);
        await base.OnParametersSetAsync();
    }

    private StandaloneEditorConstructionOptions GetWorkflowInputEditorOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions 
        {
		    AutomaticLayout = true,
		    Language = "json",
            Minimap = new EditorMinimapOptions { Enabled = false }
	    };
    }

    private StandaloneEditorConstructionOptions GetWorkflowDefinitionEditorOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions 
        {
		    AutomaticLayout = true,
		    Language = "json",
            Minimap = new EditorMinimapOptions { Enabled = false },
            ReadOnly = false,
            Value = JsonConvert.SerializeObject(this.workflow.Definition, Formatting.Indented)
	    };
    }

    private async Task<IQueryable<V1WorkflowInstanceDto>> FetchWorkflowInstancesAsync()
    {
        return (await this.SynapseApi.GetWorkflowInstancesAsync($"$filter={nameof(V1WorkflowInstanceDto.WorkflowId)} eq '{this.WorkflowId}'")).AsQueryable();
    }

    private async Task OnIntegrationEvent(CloudEventDescriptor e)
    {
        if (e.Type.Split('/')[1] != "v1workflowinstance"
            && e.Type.Split('/')[1] != "v1workflowactivity")
            return;
        this.instances = await this.FetchWorkflowInstancesAsync();
        this.diagram.DisplayActivityStatusFor(this.instances);
        this.StateHasChanged();
    }

    private void OnShowWorkflowDefinitionModal()
    {
        this.workflowDefinitionModal.Show();
    }

    private async Task OnShowWorkflowInputModal()
    {
        var schema = this.workflow.Definition.DataInputSchema?.Schema;
        if(schema == null
            && this.workflow.Definition.DataInputSchemaUri != null)
        {
            var json = await this.HttpClient.GetStringAsync(this.workflow.Definition.DataInputSchemaUri);
            schema = JSchema.Parse(json);
        }
        if(schema != null)
        {
            var example = schema.GenerateExample();
            if(example != null)
            {
                var json = JObject.FromObject(example).ToString(Formatting.Indented);
                await this.workflowInputEditor.SetValue(json);
            }  
        }
        this.workflowInputModal.Show();
    }

    private async Task OnStartWorkflowAsync()
    {
        this.workflowInputModal.Hide();
        var json = await this.workflowInputEditor.GetValue();
        await this.workflowInputEditor.SetValue(string.Empty);
        var inputData = await this.JsonSerializer.DeserializeAsync<DynamicObject>(json);
        try
        {
            var workflowInstance = await this.SynapseApi.CreateWorkflowInstanceAsync(new()
            {
                WorkflowId = this.WorkflowId,
                ActivationType = V1WorkflowInstanceActivationType.Manual,
                InputData = inputData
            });
            await this.SynapseApi.StartWorkflowInstanceAsync(workflowInstance.Id);
        }
        catch(Exception ex)
        {
            this.error = ex.ToString();
            this.errorModal.Show();
        } 
    }

}