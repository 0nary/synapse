@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/workflows/{workflowId}"
@page "/workflows/{workflowId}/instance/{workflowInstanceId}"
@using Microsoft.AspNetCore.SignalR.Client
@using Neuroglia.Data.Flux
@using Neuroglia.Serialization
@using Newtonsoft.Json
@using System.Text
@implements IDisposable
@inject IStore Store
@inject IDispatcher Dispatcher
@inject ISynapseManagementApi SynapseApi
@inject IMonacoEditorHelper MonacoEditorHelper
@inject IBreadcrumbService BreadcrumbService
@inject IJsonSerializer Serializer
@inject HubConnection HubConnection
@inject NavigationManager NavigationManager

<PageTitle>@workflow?.Id</PageTitle>
<AppRightSidebar>
    @if (workflow != null && workflowInstance == null) {
        <WorkflowToolbar @ref="workflowToolbar" Workflow="workflow" />
    }
    else if (workflow != null && workflowInstance != null)
    {
        <WorkflowInstanceToolbar WorkflowInstance="workflowInstance" />
    }
</AppRightSidebar>
<AppLeftSidebar>
    @if (workflow != null && workflowInstance == null) {
        <WorkflowDetails Workflow="workflow" />
    }
    else if (workflow != null && workflowInstance != null)
    {
        <WorkflowInstanceDetails WorkflowInstance="workflowInstance" Workflow="workflow" />
    }
</AppLeftSidebar>

@if (workflow != null)
{
    <div class="container-fluid h-100">
        <div class="row h-50 position-relative">
            <WorkflowDiagram @ref="workflowDiagram" WorkflowDefinition="workflow.Definition" />
        </div>
        <div class="row h-50">            
            @if (workflowInstance == null)
            {
                <TabControl>
                    <TabPage Header="Instances">
                        <Table Items="instances" AutoGenerateColumns="false">
                            <Columns>
                                <Column
                                    T="V1WorkflowInstance"
                                    Name="Key"
                                    ValueProvider="source => source.Key"
                                    PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstance.Key))" />
                                <Column
                                    T="V1WorkflowInstance"    
                                    Name="Status"
                                    ValueProvider="source => source.Status"
                                    PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstance.Status))">
                                    <CellTemplate Context="context">
                                        <span class="badge rounded-pill @GetCssClassFor((V1WorkflowInstanceStatus)context.Value!)">@(EnumHelper.Stringify((V1WorkflowInstanceStatus)context.Value))</span>
                                    </CellTemplate>
                                </Column>
                                <Column
                                    T="V1WorkflowInstance"   
                                    Name="Started at"
                                    ValueProvider="source => source.StartedAt"
                                    PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstance.StartedAt))"
                                    Format="MM/dd/yyyy, HH:mm"/>
                                <Column
                                    T="V1WorkflowInstance"   
                                    Name="Executed at"
                                    ValueProvider="source => source.ExecutedAt"
                                    PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstance.ExecutedAt))"
                                    Format="MM/dd/yyyy, HH:mm"/>
                                <Column
                                    T="V1WorkflowInstance"   
                                    Name="Duration"
                                    ValueProvider="source => ((V1WorkflowInstance)source).Duration"
                                    IsSorteable="false"
                                    IsFilterable="false"/>
                                <Column
                                    T="V1WorkflowInstance"   
                                    Name="Actions"
                                    ValueProvider="source => source"
                                    IsSorteable="false"
                                    IsFilterable="false">                                
                                    <CellTemplate Context="context">
                                        @if(((V1WorkflowInstance)context.Value!).Status == V1WorkflowInstanceStatus.Running) {
                                            <button @onclick="() => Dispatcher.Dispatch(new SuspendV1WorkflowInstance(((V1WorkflowInstance)context.Value!).Id))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><span class="oi oi-media-pause"></span><span class="btn-label">&nbsp; Suspend</span></button>
                                        }
                                        @if(((V1WorkflowInstance)context.Value!).Status == V1WorkflowInstanceStatus.Suspended) {
                                            <button @onclick="() => Dispatcher.Dispatch(new ResumeV1WorkflowInstance(((V1WorkflowInstance)context.Value!).Id))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><span class="oi oi-media-play"></span><span class="btn-label">&nbsp; Resume</span></button>
                                        }
                                        @if (((V1WorkflowInstance)context.Value!).Status <= V1WorkflowInstanceStatus.Resuming) {
                                            <button @onclick="() => Dispatcher.Dispatch(new CancelV1WorkflowInstance(((V1WorkflowInstance)context.Value!).Id))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><span class="oi oi-media-stop"></span><span class="btn-label">&nbsp; Terminate</span></button>
                                        }
                                        <button @onclick="async () => await StartWith(((V1WorkflowInstance?)context.Value)?.Input)" @onclick:stopPropagation="true" class="btn btn-outline-dark"><span class="oi oi-reload"></span><span class="btn-label">&nbsp; Start new</span></button>
                                        <button @onclick="async () => OnViewWorkflowInstance(context.Item)" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="oi oi-info"></small><span class="btn-label">&nbsp; Details</span></button>
                                    </CellTemplate>
                                </Column>
                            </Columns>
                        </Table>
                    </TabPage>
                    <TabPage Header="Definition">
                        @if (workflow?.Definition != null)
                        {
                            <MonacoEditor
                                CssClass="h-100 flex-grow"
                                ConstructionOptions="MonacoEditorHelper.GetStandaloneEditorConstructionOptions(JsonConvert.SerializeObject(workflow.Definition, Formatting.Indented), true)"/>
                        }
                    </TabPage>
                    <TabPage Header="Metrics">
                        <WorkflowsMetrics Workflow="workflow" />
                    </TabPage>
                </TabControl>
            }
            else if(workflowInstance != null)
            {
                
                <TabControl>
                    <TabPage Header="Input/Output">
                        <WorkflowInstanceIO WorkflowInstance="workflowInstance" />
                    </TabPage>
                    <TabPage Header="Activities">
                        <WorkflowInstanceActivitiesList Activities="sortedActivities" />
                    </TabPage>
                    <TabPage Header="Logs">
                        <WorkflowInstanceLogs WorkflowInstance="workflowInstance" />
                    </TabPage>
                </TabControl>
            }
        </div>
    </div>
}
else
{
    <Loader />
}
@code
{

    [Parameter]
    public string WorkflowId { get; set; } = null!;
    protected string workflowId = null!;
    [Parameter]
    public string? WorkflowInstanceId { get; set; } = null!;
    protected string? workflowInstanceId = null!;

    protected IDisposable? workflowSubscription;
    protected IDisposable? workflowInstanceSubscription;
    protected IDisposable? workflowActivitySubscription;
    protected WorkflowDiagram workflowDiagram = null!;
    protected IFeature<V1WorkflowCollectionState> workflowFeature = null!;
    protected IFeature<V1WorkflowInstanceCollectionState> workflowInstanceFeature = null!;
    protected IFeature<V1WorkflowActivityCollectionState> workflowActivityFeature = null!;
    protected V1Workflow? workflow = null;
    protected V1WorkflowInstance? workflowInstance = null;
    protected List<V1WorkflowActivity> sortedActivities = new List<V1WorkflowActivity>();
    protected List<V1WorkflowInstance> instances = new();
    protected IEnumerable<IBreadcrumbItem> workflowBreadCrumbBase = null!;
    protected WorkflowToolbar? workflowToolbar = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.workflowFeature = this.Store.GetFeature<V1WorkflowCollectionState>();
        this.workflowInstanceFeature = this.Store.GetFeature<V1WorkflowInstanceCollectionState>();
        this.workflowActivityFeature = this.Store.GetFeature<V1WorkflowActivityCollectionState>();
        this.workflowSubscription = this.workflowFeature
            .Subscribe(workflows =>
            {
                this.workflow = workflows.FirstOrDefault(wf => wf.Id == this.WorkflowId);
                this.UpdateActivities();
                this.UpdateMetrics();
                this.StateHasChanged();
            });
        this.workflowInstanceSubscription = this.workflowInstanceFeature
            .Subscribe(instances =>
            {
                this.instances = instances.Where(instance => instance.WorkflowId == this.WorkflowId).ToList();
                if (this.WorkflowInstanceId == null)
                {
                    this.workflowInstance = null!;
                }
                else
                {
                    this.workflowInstance = this.instances.FirstOrDefault(i => i.Id == this.WorkflowInstanceId);
                }
                this.UpdateActivities();
                this.UpdateMetrics();
                this.StateHasChanged();
            });
        this.workflowActivitySubscription = this.workflowActivityFeature
            .Subscribe(activities =>
            {
                if(this.instances == null || !this.instances.Any())
                    return;
                var foo = activities.ToList();
                this.instances.ForEach(instance =>
                {
                    var instanceActivities = activities.Where(activity => activity.WorkflowInstanceId == instance.Id);
                    if (instanceActivities.Any())
                    {
                        instance.Activities.Clear();
                        foreach(var activity in instanceActivities)
                        {
                            instance.Activities.Add(activity);                        
                        }
                    }
                });
                this.UpdateActivities();
                this.UpdateMetrics();
                this.StateHasChanged();
            });
        this.Dispatcher.Dispatch(new GetV1WorkflowById(this.WorkflowId));
        this.Dispatcher.Dispatch(new ListV1WorkflowInstancesByDefinition(this.WorkflowId));
        await this.BreadcrumbService.Use(KnownBreadcrumbs.Workflows);
        await this.BreadcrumbService.AddItem(new BreadcrumbItem(this.WorkflowId.ToString(), $"/workflows/{this.WorkflowId}"));
        this.workflowBreadCrumbBase = new List<IBreadcrumbItem>(this.BreadcrumbService.Items);
    }

    protected override async Task OnParametersSetAsync()
    {
        await this.BreadcrumbService.Use(this.workflowBreadCrumbBase);
        if (this.WorkflowId != this.workflowId)
        {
            this.workflowId = this.WorkflowId;
            this.UpdateActivities();
        }
        if (this.WorkflowInstanceId != this.workflowInstanceId)
        {
            this.workflowInstanceId = this.WorkflowInstanceId;            
            if (this.WorkflowInstanceId == null)
            {
                this.workflowInstance = null!;
            }
            else {
                this.workflowInstance = this.instances.FirstOrDefault(i => i.Id == this.WorkflowInstanceId);
                await this.BreadcrumbService.AddCurrentUri($"Instance {this.WorkflowInstanceId}");
            }
            this.UpdateActivities();
        }
    }

    protected void UpdateActivities()
    {
        if (this.WorkflowInstanceId == null)
        {
            this.sortedActivities = new List<V1WorkflowActivity>();
            if (this.workflowDiagram != null) this.workflowDiagram.DisplayActivityStatusFor(this.instances);
        }
        else
        {
            this.sortedActivities = this.workflowInstance?.Activities != null ? this.workflowInstance.Activities.OrderBy(a => a.CreatedAt).ToList() : new List<V1WorkflowActivity>();
            if (this.workflowDiagram != null) this.workflowDiagram.DisplayActivityStatusFor(this.instances.Where(i => i.Id == this.WorkflowInstanceId), true);
        }
    }

    protected void UpdateMetrics()
    {
        if (this.workflow != null && this.instances != null)
        {
            var durations = this.instances.Where(instances => instances.Duration.HasValue).Select(instance => instance.Duration!.Value);
            this.workflow.TotalInstanceCount = this.instances.Count;
            this.workflow.RunningInstanceCount = this.instances.Where(instance => instance.Status <= V1WorkflowInstanceStatus.Resuming).Count();
            this.workflow.ExecutedInstanceCount = this.instances.Where(instance => instance.Status > V1WorkflowInstanceStatus.Resuming).Count();
            this.workflow.CompletedInstanceCount = this.instances.Where(instance => instance.Status == V1WorkflowInstanceStatus.Completed).Count();
            this.workflow.FaultedInstanceCount = this.instances.Where(instance => instance.Status == V1WorkflowInstanceStatus.Faulted).Count();
            this.workflow.CancelledInstanceCount = this.instances.Where(instance => instance.Status == V1WorkflowInstanceStatus.Cancelled || instance.Status == V1WorkflowInstanceStatus.Cancelling).Count();
            this.workflow.TotalInstanceExecutionTime = TimeSpan.FromMilliseconds(this.instances.Sum(instance => instance.Duration.HasValue ? instance.Duration.Value.TotalMilliseconds : 0));
            this.workflow.ShortestInstanceDuration = durations.Any() ? durations.Min() : null;
            this.workflow.LongestInstanceDuration = durations.Any() ? durations.Max() : null;
        }
    }

    protected async Task StartWith(Neuroglia.Serialization.Dynamic? input)
    {
        if (this.workflowToolbar == null || input == null)
            return;
        var serializedInput = await this.Serializer.SerializeAsync(input);
        await this.workflowToolbar.OnShowWorkflowInputModal(serializedInput);
    }

    protected string GetCssClassFor(V1WorkflowInstanceStatus workflowInstanceStatus)
    {
        return workflowInstanceStatus switch
        {
            V1WorkflowInstanceStatus.Pending => "bg-secondary", 
            V1WorkflowInstanceStatus.Scheduling => "border-primary",
            V1WorkflowInstanceStatus.Scheduled => "bg-primary",
            V1WorkflowInstanceStatus.Starting or V1WorkflowInstanceStatus.Resuming => "border-primary text-primary",
            V1WorkflowInstanceStatus.Running => "bg-primary",
            V1WorkflowInstanceStatus.Suspended => "bg-warning",
            V1WorkflowInstanceStatus.Faulted => "bg-danger",
            V1WorkflowInstanceStatus.Cancelling => "border-danger text-primary",
            V1WorkflowInstanceStatus.Cancelled => "bg-danger",
            V1WorkflowInstanceStatus.Completed => "bg-success",
            _ => string.Empty
        };
    }

    private void OnViewWorkflowInstance(V1WorkflowInstance workflowInstance)
    {
        this.NavigationManager.NavigateTo($"/workflows/{this.WorkflowId}/instance/{workflowInstance.Id}");
    }

    public void Dispose()
    {
        if (this.workflowSubscription != null)
        {
            this.workflowSubscription?.Dispose();
            this.workflowSubscription = null;
        }
        if (this.workflowInstanceSubscription != null)
        {
            this.workflowInstanceSubscription?.Dispose();
            this.workflowInstanceSubscription = null;
        }
        if (this.workflowActivitySubscription != null)
        {
            this.workflowActivitySubscription?.Dispose();
            this.workflowActivitySubscription = null;
        }
    }

}