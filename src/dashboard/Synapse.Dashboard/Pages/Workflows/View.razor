@page "/workflows/{workflowId}"
@page "/workflows/{workflowId}/instance/{workflowInstanceId}"
@using Blazor.Diagrams.Core
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using System.Text
@inject ISynapseManagementApi SynapseApi
@inject IWorkflowDiagramBuilder WorkflowDiagramBuilder
@inject IMonacoEditorHelper MonacoEditorHelper
@inject IBreadcrumbService BreadcrumbService
@inject HubConnection HubConnection

<PageTitle>@workflow?.Id</PageTitle>
<AppRightSidebar>
    @if (workflow != null && workflowInstance == null) {
        <WorkflowToolbar Workflow="workflow" />
    }
    else if (workflow != null && workflowInstance != null)
    {
        <WorkflowInstanceToolbar WorkflowInstance="workflowInstance" />
    }
</AppRightSidebar>
<AppLeftSidebar>
    @if (workflow != null && workflowInstance == null) {
        <WorkflowDetails Workflow="workflow" />
    }
    else if (workflow != null && workflowInstance != null)
    {
        <WorkflowInstanceDetails WorkflowInstance="workflowInstance" Workflow="workflow" />
    }
</AppLeftSidebar>

@if (workflow != null)
{
    <div class="container-fluid h-100">
        <div class="row h-50 position-relative">
            <WorkflowDiagram Diagram="diagram" />
        </div>
        <div class="row h-50">            
            @if (workflowInstance == null)
            {
                <TabControl>
                    <TabPage Header="Instances">
                        <DataTable DataSource="instances" ViewDetailsUriProvider="InstanceDetailsUriProvider">
                            <Columns>
                                <DataColumnProperties 
                                Name="Key"
                                ValueProvider="source => ((V1WorkflowInstance)source).Key"
                                PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstance.Key))" />
                                <DataColumnProperties 
                                Name="Status"
                                ValueProvider="source => ((V1WorkflowInstance)source).Status"
                                PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstance.Status))" />
                                <DataColumnProperties 
                                Name="Started at"
                                ValueProvider="source => ((V1WorkflowInstance)source).StartedAt"
                                PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstance.StartedAt))"
                                Format="MM/dd/yyyy, HH:mm"/>
                                <DataColumnProperties 
                                Name="Executed at"
                                ValueProvider="source => ((V1WorkflowInstance)source).ExecutedAt"
                                PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstance.ExecutedAt))"
                                Format="MM/dd/yyyy, HH:mm"/>
                                <DataColumnProperties 
                                Name="Duration"
                                ValueProvider="source => ((V1WorkflowInstance)source).Duration"
                                IsSorteable="false"
                                IsFilterable="false"/>
                            </Columns>
                        </DataTable>
                    </TabPage>
                    <TabPage Header="Definition">
                        @if (workflow?.Definition != null)
                        {
                            <MonacoEditor
                            CssClass="h-100 flex-grow"
                            ConstructionOptions="MonacoEditorHelper.GetStandaloneEditorConstructionOptions(JsonConvert.SerializeObject(workflow.Definition, Formatting.Indented), true)"/>
                        }
                    </TabPage>
                    <TabPage Header="Metrics">
                        <WorkflowsMetrics Workflow="workflow" />
                    </TabPage>
                </TabControl>
            }
            else if(workflowInstance != null)
            {
                
                <TabControl>
                    <TabPage Header="Input/Output">
                        <WorkflowInstanceIO WorkflowInstance="workflowInstance" />
                    </TabPage>
                    <TabPage Header="Activities">
                        <WorkflowInstanceActivitiesList Activities="sortedActivities" />
                    </TabPage>
                </TabControl>
            }
        </div>
    </div>
}
else
{
    <Loader />
}
@code
{

    [Parameter]
    public string WorkflowId { get; set; } = null!;
    [Parameter]
    public string? WorkflowInstanceId { get; set; } = null!;

    protected V1Workflow workflow = null!;
    protected V1WorkflowInstance workflowInstance = null!;
    protected List<V1WorkflowActivity> sortedActivities = new List<V1WorkflowActivity>();
    protected Diagram diagram { get; set; } = null!;
    protected IQueryable<V1WorkflowInstance> instances = null!;
    protected IEnumerable<IBreadcrumbItem> workflowBreadCrumbBase = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.workflow = await this.SynapseApi.GetWorkflowByIdAsync(this.WorkflowId);
        this.diagram = await this.WorkflowDiagramBuilder.BuildDiagram(this.workflow.Definition);
        this.instances = await this.FetchWorkflowInstancesAsync();
        this.diagram.DisplayActivityStatusFor(this.instances);
        this.HubConnection.On<V1CloudEvent>(nameof(ISynapseMonitoringApiClient.PublishIntegrationEvent), this.OnIntegrationEvent);
        await this.BreadcrumbService.Use(KnownBreadcrumbs.Workflows);
        await this.BreadcrumbService.AddCurrentUri(this.WorkflowId);
        this.workflowBreadCrumbBase = new List<IBreadcrumbItem>(this.BreadcrumbService.Items);
    }

    protected override async Task OnParametersSetAsync()
    {
        await this.BreadcrumbService.Use(this.workflowBreadCrumbBase);
        if (this.WorkflowInstanceId == null)
        {
            this.workflowInstance = null!;
            this.sortedActivities = new List<V1WorkflowActivity>();
            this.diagram.DisplayActivityStatusFor(this.instances);
        }
        else
        {
            await this.BreadcrumbService.AddCurrentUri($"Instance {this.WorkflowInstanceId}");
            this.workflowInstance = await this.SynapseApi.GetWorkflowInstanceByIdAsync(this.WorkflowInstanceId);
            this.sortedActivities = this.workflowInstance.Activities.OrderBy(a => a.StartedAt).ToList();
            this.diagram.DisplayActivityStatusFor(this.instances.Where(i => i.Id == this.WorkflowInstanceId));
        }
        this.StateHasChanged();
    }

    public string? InstanceDetailsUriProvider(object? key)
    {
        if (key == null) 
            return null;
        return $"/workflows/{this.WorkflowId}/instance/{key}";
    }

    protected async Task<IQueryable<V1WorkflowInstance>> FetchWorkflowInstancesAsync()
    {
        return (await this.SynapseApi.GetWorkflowInstancesAsync($"$filter={nameof(V1WorkflowInstance.WorkflowId)} eq '{this.WorkflowId}'")).AsQueryable();
    }

    protected async Task OnIntegrationEvent(V1CloudEvent e)
    {
        if (e.Type.Split('/')[1] != "v1workflowinstance"
            && e.Type.Split('/')[1] != "v1workflowactivity")
            return;
        this.instances = await this.FetchWorkflowInstancesAsync();
        if (this.WorkflowInstanceId == null)
        {
            this.diagram.DisplayActivityStatusFor(this.instances);
        }
        else
        {
            this.diagram.DisplayActivityStatusFor(this.instances.Where(i => i.Id == this.WorkflowInstanceId));
        }
        this.StateHasChanged();
    }

}