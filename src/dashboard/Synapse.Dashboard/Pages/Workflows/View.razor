@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/workflows/{workflowId}"
@page "/workflows/{workflowId}/instance/{workflowInstanceId}"
@using Microsoft.AspNetCore.SignalR.Client
@using Neuroglia.Data.Flux
@using Newtonsoft.Json
@using System.Text
@implements IDisposable
@inject IStore Store
@inject IDispatcher Dispatcher
@inject ISynapseManagementApi SynapseApi
@inject IMonacoEditorHelper MonacoEditorHelper
@inject IBreadcrumbService BreadcrumbService
@inject HubConnection HubConnection
@inject NavigationManager NavigationManager

<PageTitle>@workflow?.Id</PageTitle>
<AppRightSidebar>
    @if (workflow != null && workflowInstance == null) {
        <WorkflowToolbar Workflow="workflow" />
    }
    else if (workflow != null && workflowInstance != null)
    {
        <WorkflowInstanceToolbar WorkflowInstance="workflowInstance" />
    }
</AppRightSidebar>
<AppLeftSidebar>
    @if (workflow != null && workflowInstance == null) {
        <WorkflowDetails Workflow="workflow" />
    }
    else if (workflow != null && workflowInstance != null)
    {
        <WorkflowInstanceDetails WorkflowInstance="workflowInstance" Workflow="workflow" />
    }
</AppLeftSidebar>

@if (workflow != null)
{
    <div class="container-fluid h-100">
        <div class="row h-50 position-relative">
            <WorkflowDiagram @ref="workflowDiagram" WorkflowDefinition="workflow.Definition" />
        </div>
        <div class="row h-50">            
            @if (workflowInstance == null)
            {
                <TabControl>
                    <TabPage Header="Instances">
                        <Table Items="instances" AutoGenerateColumns="false">
                            <Columns>
                                <Column
                                    T="V1WorkflowInstance"
                                    Name="Key"
                                    ValueProvider="source => source.Key"
                                    PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstance.Key))" />
                                <Column
                                    T="V1WorkflowInstance"    
                                    Name="Status"
                                    ValueProvider="source => source.Status"
                                    PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstance.Status))">
                                    <CellTemplate Context="context">
                                        <span class="badge rounded-pill @GetCssClassFor((V1WorkflowInstanceStatus)context.Value!)">@(EnumHelper.Stringify((V1WorkflowInstanceStatus)context.Value))</span>
                                    </CellTemplate>
                                </Column>
                                <Column
                                    T="V1WorkflowInstance"   
                                    Name="Started at"
                                    ValueProvider="source => source.StartedAt"
                                    PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstance.StartedAt))"
                                    Format="MM/dd/yyyy, HH:mm"/>
                                <Column
                                    T="V1WorkflowInstance"   
                                    Name="Executed at"
                                    ValueProvider="source => source.ExecutedAt"
                                    PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstance.ExecutedAt))"
                                    Format="MM/dd/yyyy, HH:mm"/>
                                <Column
                                    T="V1WorkflowInstance"   
                                    Name="Duration"
                                    ValueProvider="source => ((V1WorkflowInstance)source).Duration"
                                    IsSorteable="false"
                                    IsFilterable="false"/>
                                <ViewDetailsColumn T="V1WorkflowInstance" OnViewDetails="OnViewWorkflowInstance" />
                            </Columns>
                        </Table>
                    </TabPage>
                    <TabPage Header="Definition">
                        @if (workflow?.Definition != null)
                        {
                            <MonacoEditor
                                CssClass="h-100 flex-grow"
                                ConstructionOptions="MonacoEditorHelper.GetStandaloneEditorConstructionOptions(JsonConvert.SerializeObject(workflow.Definition, Formatting.Indented), true)"/>
                        }
                    </TabPage>
                    <TabPage Header="Metrics">
                        <WorkflowsMetrics Workflow="workflow" />
                    </TabPage>
                </TabControl>
            }
            else if(workflowInstance != null)
            {
                
                <TabControl>
                    <TabPage Header="Input/Output">
                        <WorkflowInstanceIO WorkflowInstance="workflowInstance" />
                    </TabPage>
                    <TabPage Header="Activities">
                        <WorkflowInstanceActivitiesList Activities="sortedActivities" />
                    </TabPage>
                </TabControl>
            }
        </div>
    </div>
}
else
{
    <Loader />
}
@code
{

    [Parameter]
    public string WorkflowId { get; set; } = null!;
    [Parameter]
    public string? WorkflowInstanceId { get; set; } = null!;

    protected IDisposable? workflowInstanceSubscription;
    protected IDisposable? workflowActivitySubscription;
    protected WorkflowDiagram workflowDiagram = null!;
    protected IFeature<V1WorkflowInstanceCollectionState> workflowInstanceFeature = null!;
    protected IFeature<V1WorkflowActivityCollectionState> workflowActivityFeature = null!;
    protected V1Workflow workflow = null!;
    protected V1WorkflowInstance workflowInstance = null!;
    protected List<V1WorkflowActivity> sortedActivities = new List<V1WorkflowActivity>();
    protected List<V1WorkflowInstance> instances = new();
    protected IEnumerable<IBreadcrumbItem> workflowBreadCrumbBase = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.workflow = await this.SynapseApi.GetWorkflowByIdAsync(this.WorkflowId);
        this.workflowInstanceFeature = this.Store.GetFeature<V1WorkflowInstanceCollectionState>();
        this.workflowActivityFeature = this.Store.GetFeature<V1WorkflowActivityCollectionState>();
        this.workflowInstanceSubscription = this.workflowInstanceFeature
            .Subscribe(instances =>
            {
                this.instances = instances;
                this.UpdateActivities();
            });

        this.workflowActivitySubscription = this.workflowActivityFeature
            .Subscribe(activities =>
            {
                if(this.instances == null || !this.instances.Any())
                    return;
                var foo = activities.ToList();
                this.instances.ForEach(instance =>
                {
                    var instanceActivities = activities.Where(activity => activity.WorkflowInstanceId == instance.Id);
                    if (instanceActivities.Any())
                    {
                        instance.Activities.Clear();
                        foreach(var activity in instanceActivities)
                        {
                            instance.Activities.Add(activity);                        
                        }
                    }
                });
                this.UpdateActivities();
            });
        this.Dispatcher.Dispatch(new ListV1WorkflowInstancesByDefinition(this.WorkflowId));
        await this.BreadcrumbService.Use(KnownBreadcrumbs.Workflows);
        await this.BreadcrumbService.AddCurrentUri(this.WorkflowId);
        this.workflowBreadCrumbBase = new List<IBreadcrumbItem>(this.BreadcrumbService.Items);
    }

    protected override async Task OnParametersSetAsync()
    {
        await this.BreadcrumbService.Use(this.workflowBreadCrumbBase);
        if (this.WorkflowInstanceId == null)
        {
            this.workflowInstance = null!;
        }
        else
        { 
            this.workflowInstance = await this.SynapseApi.GetWorkflowInstanceByIdAsync(this.WorkflowInstanceId);
            await this.BreadcrumbService.AddCurrentUri($"Instance {this.WorkflowInstanceId}");
        }
        this.UpdateActivities();
    }

    protected void UpdateActivities()
    {
        if (this.WorkflowInstanceId == null)
        {
            this.sortedActivities = new List<V1WorkflowActivity>();
            if (this.workflowDiagram != null) this.workflowDiagram.DisplayActivityStatusFor(this.instances);
        }
        else
        {
            this.sortedActivities = this.workflowInstance.Activities.OrderBy(a => a.CreatedAt).ToList();
            if (this.workflowDiagram != null) this.workflowDiagram.DisplayActivityStatusFor(this.instances.Where(i => i.Id == this.WorkflowInstanceId));
        }
        this.StateHasChanged();
    }

    protected string GetCssClassFor(V1WorkflowInstanceStatus workflowInstanceStatus)
    {
        return workflowInstanceStatus switch
        {
            V1WorkflowInstanceStatus.Pending => "bg-secondary", 
            V1WorkflowInstanceStatus.Scheduling => "border-primary",
            V1WorkflowInstanceStatus.Scheduled => "bg-primary",
            V1WorkflowInstanceStatus.Starting or V1WorkflowInstanceStatus.Resuming => "border-primary text-primary",
            V1WorkflowInstanceStatus.Running => "bg-primary",
            V1WorkflowInstanceStatus.Suspended => "bg-warning",
            V1WorkflowInstanceStatus.Faulted => "bg-danger",
            V1WorkflowInstanceStatus.Completed => "bg-success",
            _ => string.Empty
        };
    }

    private void OnViewWorkflowInstance(V1WorkflowInstance workflowInstance)
    {
        this.NavigationManager.NavigateTo($"/workflows/{this.WorkflowId}/instance/{workflowInstance.Id}");
    }

    public void Dispose()
    {
        if (this.workflowInstanceSubscription != null)
        {
            this.workflowInstanceSubscription?.Dispose();
            this.workflowInstanceSubscription = null;
        }
        if (this.workflowActivitySubscription != null)
        {
            this.workflowActivitySubscription?.Dispose();
            this.workflowActivitySubscription = null;
        }
    }

}