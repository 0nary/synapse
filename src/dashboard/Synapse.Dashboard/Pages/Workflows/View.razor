@page "/workflows/{workflowId}"
@using Blazor.Diagrams.Core
@using Microsoft.AspNetCore.SignalR.Client
@using Synapse.Dashboard.Components
@using Synapse.Integration.Models
@using Synapse.Integration.Services
@using Synapse.Ports.WebSockets.Client.Models
@using Synapse.Ports.WebSockets.Client.Services
@inject ISynapseApi SynapseApi
@inject IWorkflowDiagramBuilder WorkflowDiagramBuilder
@inject HubConnection HubConnection

<PageTitle>@workflow?.Id</PageTitle>
<AppHeader>
    <span class="h5 m-0 p-0">@workflow?.Id</span>
</AppHeader>

@if (workflow != null)
{
    <div class="container-fluid h-100">
        <div class="row h-50">
            <WorkflowDiagram Diagram="diagram" />
        </div>
        <div class="row h-50 border border-dark">
            <TabControl>
                <TabPage Header="Instances">
                    <DataTable DataSource="instances">
                        <Columns>
                            <DataColumnProperties 
                                Name="Key"
                                ValueProvider="source => ((V1WorkflowInstanceDto)source).Key"
                                PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstanceDto.Key))" />
                            <DataColumnProperties 
                                Name="Status"
                                ValueProvider="source => ((V1WorkflowInstanceDto)source).Status"
                                PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstanceDto.Status))" />
                            <DataColumnProperties 
                                Name="Started at"
                                ValueProvider="source => ((V1WorkflowInstanceDto)source).StartedAt"
                                PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstanceDto.StartedAt))"
                                Format="MM/dd/yyyy, HH:mm"/>
                            <DataColumnProperties 
                                Name="Executed at"
                                ValueProvider="source => ((V1WorkflowInstanceDto)source).ExecutedAt"
                                PropertyPath="@PropertyPath.Parse(nameof(V1WorkflowInstanceDto.ExecutedAt))"
                                Format="MM/dd/yyyy, HH:mm"/>
                        </Columns>
                    </DataTable>
                </TabPage>
            </TabControl>
        </div>
    </div>
    <Modal @ref="modal">
        <Title>Error</Title>
        <Body>
            <p>An error occured:</p>
            <div class="border rounded bg-danger text-white text-break p-1">@((MarkupString)error)</div>
        </Body>
        <Footer>
            <button @onclick="() => modal.Hide()" class="btn btn-secondary">Close</button>
        </Footer>
    </Modal>
}
else
{
    <p>Loading...</p>
}
@code
{

    [Parameter]
    public string WorkflowId { get; set; } = null!;

    private Modal modal = null!;
    private V1WorkflowDto workflow = null!;
    private Diagram diagram { get; set; } = null!;
    private IQueryable<V1WorkflowInstanceDto> instances = null!;
    private string error = null!;

    protected override async Task OnInitializedAsync()
    {
        this.workflow = await this.SynapseApi.GetWorkflowByIdAsync(this.WorkflowId);
        this.diagram = await this.WorkflowDiagramBuilder.BuildDiagram(this.workflow.Definition);
        this.instances = await this.FetchWorkflowInstancesAsync();
        this.diagram.DisplayActivityStatusFor(this.instances);
        this.HubConnection.On<CloudEventDescriptor>(nameof(ISynapseWebSocketApiClient.PublishIntegrationEvent), this.OnIntegrationEvent);
        this.StateHasChanged();
        await base.OnInitializedAsync();
    }

    private async Task<IQueryable<V1WorkflowInstanceDto>> FetchWorkflowInstancesAsync()
    {
        return (await this.SynapseApi.GetWorkflowInstancesAsync($"$filter={nameof(V1WorkflowInstanceDto.WorkflowId)} eq '{this.WorkflowId}'")).AsQueryable();
    }

    private async Task OnIntegrationEvent(CloudEventDescriptor e)
    {
        if (e.Type.Split('/')[1] != "v1workflowinstance"
            && e.Type.Split('/')[1] != "v1workflowactivity")
            return;
        this.instances = await this.FetchWorkflowInstancesAsync();
        this.diagram.DisplayActivityStatusFor(this.instances);
        this.StateHasChanged();
    }

}