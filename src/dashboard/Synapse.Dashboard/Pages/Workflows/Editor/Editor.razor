@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@page "/workflows/editor"
@using System.Reactive.Subjects
@using System.Reactive.Linq
@using Synapse.Dashboard.Pages.Workflows.Editor.Actions
@using Synapse.Dashboard.Pages.Workflows.Editor.State
@inject IMonacoEditorHelper MonacoEditorHelper
@inject IStore Store
@inject IDispatcher Dispatcher
@inherits StatefulComponent<WorkflowEditorState>

<PageTitle>Workflow editor</PageTitle>

@if (State.WorkflowDefinition != null)
{
    <div class="row">
        <div class="col-4">
            <WorkflowEditor
            Workflow="State.WorkflowDefinition" 
            OnPropertyChanged="OnWorkflowDefinitionChanged" />
        </div>
        <div class="col-8">
            <PreferedLanguageSelector PreferedLanguageChange="ToggletextBasedEditorLanguage" />
            <MonacoEditor @ref="textBasedEditor"
            CssClass="vh-85"
            ConstructionOptions="MonacoEditorHelper.GetStandaloneEditorConstructionOptions()"
            OnDidInit="OnTextBasedEditorInit"
            OnDidChangeModelContent="OnTextBasedDefinitionChanged"/>
        </div>
    </div>
}

@code{
    private MonacoEditor? textBasedEditor;
    private Subject<string>? editorValue;
    private Subject<bool>? disposeNotifier;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.Dispatcher.Dispatch(new InitializeState());
        this.disposeNotifier = new Subject<bool>();
        this.editorValue = new Subject<string>();
        this.editorValue
            .Throttle(TimeSpan.FromMilliseconds(300))
            .DistinctUntilChanged()
            .TakeUntil(this.disposeNotifier)
            .Subscribe(text => this.Dispatcher.Dispatch(new HandleTextBasedEditorChange(text)));
        WorkflowEditorSelectors.SelectWorkflowDefinitionText(this.Store)
            .TakeUntil(this.disposeNotifier)
            .Subscribe(async (text) =>
            {
                if (text != null && this.textBasedEditor != null)
                {
                    var currentText = await this.textBasedEditor!.GetValue();
                    if (currentText != text) {
                        await this.textBasedEditor.SetValue(text);
                    }
                }
            });
    }

    protected async Task OnWorkflowDefinitionChanged()
    {
        this.Dispatcher.Dispatch(new HandleFormBasedEditorChange(State.WorkflowDefinition!));
        await Task.CompletedTask;
    }

    protected virtual async Task ToggletextBasedEditorLanguage(string language)
    {
        await this.OnTextBasedEditorInit(this.textBasedEditor! as MonacoEditorBase);
        var text = await this.textBasedEditor!.GetValue();
        this.Dispatcher.Dispatch(new ChangeTextLanguage(language, text));
    }

    protected async Task OnTextBasedEditorInit(MonacoEditorBase editor)
    {
        var model = await (editor as MonacoEditor)!.GetModel();
        await MonacoEditorBase.SetModelLanguage(model, this.MonacoEditorHelper.PreferedLanguage);
        if (this.MonacoEditorHelper.PreferedLanguage == PreferedLanguage.JSON)
            await model.jsRuntime.InvokeVoidAsync("enableJsonValidation08", model.Uri);
    }

    protected async Task OnTextBasedDefinitionChanged(ModelContentChangedEvent e)
    {
        if (!this.State.Updating && this.editorValue != null)
        {
            var text = await this.textBasedEditor!.GetValue();
            this.editorValue.OnNext(text);
        }
    }

    private bool disposed;
    protected override void Dispose(bool disposing)
    {
        if (!this.disposed)
        {
            if (this.disposeNotifier != null)
            {
                this.disposeNotifier.OnNext(true);
                this.disposeNotifier.OnCompleted();
                this.disposeNotifier.Dispose();
                this.disposeNotifier = null;
            }
            this.disposed = true;
        }
        base.Dispose();
    }

}