@page "/workflows/new"
@using Neuroglia.Data
@using Newtonsoft.Json.Schema
@using ServerlessWorkflow.Sdk.Services.IO
@using ServerlessWorkflow.Sdk.Services.Validation
@using Synapse.Integration.Commands.Workflows
@using Synapse.Integration.Models
@using Synapse.Integration.Services
@using Synapse.Dashboard.Components
@using System.Text
@inject ISynapseApi SynapseApi
@inject IWorkflowReader WorkflowReader
@inject IWorkflowValidator WorkflowValidator

<PageTitle>Create new workflow</PageTitle>
<AppHeader>Create new workflow</AppHeader>

@if(validationErrors != null && validationErrors.Any())
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in validationErrors)
            {
                <li>@error.ToString()</li>
            }
        </ul>
    </div>
}
<div>
    <label class="form-form-label">Definition</label>
    <MonacoEditor
        @ref="editor"
        Id="definition-editor"
        ConstructionOptions="MonacoEditorOptionsBuilder"
        OnDidInit="OnMonacoEditorDidInit"
    />
</div>
<button @onclick="OnCreateWorkflow" type="button" class="btn btn-blockquote btn-dark">Create Workflow</button>


@code {

    IList<ValidationError> validationErrors;
    private MonacoEditor editor;

    async Task OnCreateWorkflow()
    {
        var rawDefinition = await this.editor.GetValue();
        if (string.IsNullOrWhiteSpace(rawDefinition))
        {
            return;
        }
        var command = new V1CreateWorkflowCommandDto();
        try
        {
            using var stream = new MemoryStream(Encoding.UTF8.GetBytes(rawDefinition));
            command.Definition = await this.WorkflowReader.ReadAsync(stream);
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.ToString());
            //todo: warn the user via validationErrors
            return;
        }
        var workflow = await this.SynapseApi.CreateWorkflowAsync(command);
    }

    private async Task OnMonacoEditorDidInit(MonacoEditorBase editorBase)
    {
        var model = await this.editor.GetModel();
        await model.jsRuntime.InvokeVoidAsync("enableJsonValidation08" , model.Uri);
    }

    private StandaloneEditorConstructionOptions MonacoEditorOptionsBuilder(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions {
		    AutomaticLayout = true,
		    Language = "json"
	    };
    }

}
