@page "/workflows"
@using Neuroglia.Data
@using Neuroglia.Data.Flux
@using Synapse.Integration.Models
@using System.Reactive.Linq
@inherits StatefulComponent<V1WorkflowCollectionState>
@inject IServiceProvider ServiceProvider
@inject IBreadcrumbService BreadcrumbService
@inject NavigationManager NavigationManager

<PageTitle>Workflows</PageTitle>
<AppRightSidebar>
    <Toolbar>
        <button @onclick="OnNewWorkflow" class="btn btn-outline-dark" title="New workflow"><span class="oi oi-plus"></span></button>
    </Toolbar>
</AppRightSidebar>
<Table Items="workflows" AutoGenerateColumns="false">
    <RowTemplate Context="RenderContext">
        <ExpandableDataRow>
            <Header>
                <CellCollectionPresenter Item="@RenderContext.Item" />
            </Header>
            <Body>
                <table class="table">
                    <tbody>
                        @foreach (var workflow in RenderContext.Item.Value)
                        {
                            <tr>
                                <td>@workflow.Definition.Version</td>
                                <td>@workflow.CreatedAt</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </Body>
        </ExpandableDataRow>
    </RowTemplate>
    <Columns>
        <Column T="KeyValuePair<string, List<V1Workflow>>" 
            Name="Name"
            ValueProvider="g => g.Key" />
        <Column T="KeyValuePair<string, List<V1Workflow>>" 
            Name="Versions"
            ValueProvider="g => g.Value.Count()" />
        <Column T="KeyValuePair<string, List<V1Workflow>>" 
            Name="Latest version"
            ValueProvider="g => g.Value.Max(w => w.Definition.Version)" />
        <ViewDetailsColumn T="KeyValuePair<string, List<V1Workflow>>" OnViewDetails="kvp => OnViewWorkflow(kvp.Value.OrderBy(w => w.Definition.Version).Last())" />
    </Columns>
</Table>

@code {

    private IDisposable? _Subscription;
    private Dictionary<string, List<V1Workflow>> workflows = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.BreadcrumbService.Use(KnownBreadcrumbs.Workflows);
        this._Subscription = this.Feature
            .Subscribe(workflows =>
            {
                this.workflows = workflows
                    .GroupBy(w => w.Definition.Id!)
                    .ToDictionary(g => g.Key, g => g.ToList())!;
                this.StateHasChanged();;
            });
        this.Dispatcher.Dispatch(new ListV1Workflows());
    }

    void OnNewWorkflow()
    {
        this.NavigationManager.NavigateTo("/workflows/new");
    }

    void OnViewWorkflow(V1Workflow workflow)
    {
        this.NavigationManager.NavigateTo($"/workflows/{workflow.Id}");

    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (disposing)
        {
            this._Subscription?.Dispose();
            this._Subscription = null;
        }
    }

}
