@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@using Newtonsoft.Json.Linq
@using Newtonsoft.Json.Schema
@namespace Synapse.Dashboard

<CascadingValue Value="this">
    @if(Schema != null)
    {
        <div>
            @foreach(var property in Schema.Properties)
            {
                <JsonFormProperty Name="@property.Key" Schema="@property.Value" Value="@Get(property.Key)" IsRequired="@Schema.Required.Contains(property.Key)" OnValueChanged="async e => await OnPropertyValueChanged(property.Key, e.Value)" />
            }
        </div>
    }
</CascadingValue>

@code 
{

    [Parameter] public JSchema Schema { get; set; } = null!;

    [Parameter] public object? Value { get; set; }

    [Parameter] public EventCallback<ChangeEventArgs> OnValueChanged { get; set; }

    private IDictionary<string, object> modelProperties = null!;
    private List<JsonFormProperty> formProperties = new();

    internal void AddProperty(JsonFormProperty property)
    {
        this.formProperties.Add(property);

    }

    private object? Get(string propertyName)
    {
        if (this.modelProperties.TryGetValue(propertyName, out var propertyValue))
            return propertyValue;
        else
            return null;
    }

    public async Task<bool> ValidateAsync(IList<ValidationError> errors)
    {
        var value = JObject.FromObject(this.modelProperties);
        var result = await Task.FromResult(value.IsValid(this.Schema, out errors));
        return result;
    }

    public async Task<object?> GetValueAsync()
    {
        return (dynamic)this.modelProperties;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.Value == null)
            this.Value = this.Schema.GenerateDefault();
        this.modelProperties = this.Value.ToExpandoObject()!;
    }

    private async Task OnPropertyValueChanged(string property, object? value)
    {
        this.modelProperties[property] = value!;
        await this.OnValueChanged.InvokeAsync(new() { Value = await this.GetValueAsync() });
    }

}