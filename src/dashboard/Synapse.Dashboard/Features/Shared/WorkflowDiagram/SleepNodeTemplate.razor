@namespace Synapse.Dashboard
@inherits NodeTemplate
<g class="node @Node.CssClass" transform="translate(@((Node.X ?? 0).ToInvariantString()), @((Node.Y ?? 0).ToInvariantString()))">
    <Rectangle BBox="Node.BBox" RadiusX="Node.RadiusX" RadiusY="Node.RadiusY" />
    <g transform="translate(@X, @Y)">
        <svg width="@HalfWidth" height="@HalfHeight">
            <use xlink:href="#sleep-symbol" />
        </svg>
    </g>
    
    @if (!string.IsNullOrWhiteSpace(Node.Label)) {
        <g class="label">
            <foreignObject 
                x="@((Node.BBox!.X).ToInvariantString())"
                y="0" 
                width="@Node.BBox!.Width.ToInvariantString()" 
                height="@Consts.LabelHeight"
            >
                <div>@Node.Label</div>
            </foreignObject>
        </g>
    }
    @if (Graph.ShowConstruction) {
        <circle cx="0" cy="0" r="1" fill="red" />
    }
</g>
@code {
    protected virtual string? HalfWidth => (this.Node.BBox!.Width / 2).ToInvariantString();
    protected virtual string? HalfHeight => (this.Node.BBox!.Height / 2).ToInvariantString();
    protected virtual string? X => (0 - this.Node.BBox!.Width / 4).ToInvariantString();
    protected virtual string? Y => (0 - this.Node.BBox!.Height / 2).ToInvariantString();
}
