@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@using System.Collections
@inject IChartService ChartService
@implements IDisposable
@implements IAsyncDisposable
 
<canvas @ref="canvasRef" id="@Id"></canvas>
 
@code {

    [Parameter]
    public string Id { get; set; } = Guid.NewGuid().ToString("N").ToLowerInvariant();

    [Parameter]
    public ChartConfiguration Configuration { get; set; } = null!;
    protected ChartConfiguration configuration { get; set; } = null!;

    protected ElementReference? canvasRef { get; set; }
    protected IJSObjectReference? chart = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if(firstRender && this.chart == null && this.canvasRef != null)
        {
            this.chart = await this.ChartService.CreateChartAsync(this.canvasRef.Value, this.configuration);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.configuration != this.Configuration)
        {
            this.configuration = this.Configuration;
            if (this.chart != null)
            {
                await this.chart.InvokeVoidAsync("destroy");
                await this.chart.DisposeAsync();
                this.chart = null;
            }
            if (this.canvasRef.HasValue) {
                this.chart = await this.ChartService.CreateChartAsync(this.canvasRef.Value, this.configuration);
            }
        }
    }

    private bool _Disposed;
    public void Dispose()
    {
        this.Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }
    

    public async ValueTask DisposeAsync()
    {
        await this.DisposeAsyncCore().ConfigureAwait(false);

        this.Dispose(disposing: false);
#pragma warning disable CA1816 // Dispose methods should call SuppressFinalize
        GC.SuppressFinalize(this);
#pragma warning restore CA1816 // Dispose methods should call SuppressFinalize
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        {
            (this.chart as IDisposable)?.Dispose();
            this.chart = null;
        }
    }

    protected virtual async ValueTask DisposeAsyncCore()
    {
        if (this.chart is not null)
        {
            await this.chart.DisposeAsync().ConfigureAwait(false);
        }
        this.chart = null;
    }

}
