@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@
@namespace Synapse.Dashboard
@inject IAccordionManager AccordionManager
@implements IDisposable
@implements IAccordionModel

<div class="accordion">
    <div class="accordion-item">
        <div class="accordion-header">
            <button type="button" class="accordion-button @(IsExpanded ? "" : "collapsed")" @onclick="Toggle">
                @Header
            </button>
        </div>
        @if (IsExpanded) {
            <div class="accordion-collapse collapse show">
                <div class="accordion-body">
                    @Body
                </div>
            </div>
        }
    </div>
</div>

@code {
    /// <summary>
    /// Gets/sets the title of the accordion
    /// </summary>
    [Parameter] public RenderFragment? Header { get; set; }

    /// <summary>
    /// Gets/sets the content of the accordion
    /// </summary>
    [Parameter] public RenderFragment? Body { get; set; }

    /// <summary>
    /// Gets/sets if the accordion is opened
    /// </summary>
    [Parameter] public bool IsExpanded { get; set; } = false;

    /// <summary>
    /// Gets/sets if the accordion can be opened at the same time than others
    /// </summary>
    [Parameter] public bool AllowsMultiple { get; set; } = true;

    /// <summary>
    /// Register the accordion
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await this.AccordionManager.Register(this);
        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Deregister the accordion when the component is disposed
    /// </summary>
    public void Dispose()
    {
        this.AccordionManager.Deregister(this);
        GC.SuppressFinalize(this);
    }

    /// <summary>
    /// Toggles the accordion
    /// </summary>
    /// <returns></returns>
    public async Task Toggle()
    {
        await this.AccordionManager.Toggle(this);
    }

}
