@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@using System.Linq.Expressions
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@namespace Synapse.Dashboard
@typeparam T

@code {

    [CascadingParameter] public Table<T> Table { get; set; } = null!;

    [Parameter] public string? Name { get; set; }

    [Parameter] public string? CssClass { get; set; }

    [Parameter] public string? Description { get; set; }

    [Parameter] public Type? Type { get; set; }

    [Parameter] public string? Format { get; set; }

    [Parameter] public IFormatProvider? FormatProvider { get; set; }

    [Parameter] public PropertyPath? PropertyPath { get; set; }

    [Parameter] public bool IsDraggable { get; set; } = true;

    [Parameter] public bool IsFilterable { get; set; } = true;

    [Parameter] public bool IsSorteable { get; set; } = true;

    [Parameter] public bool IsVisible { get; set; } = true;

    [Parameter] public int? DisplayOrder { get; set; }

    public SortMode SortMode { get; private set; }

    public bool AutoGenerated { get; private set; }

    [Parameter] public Expression<Func<T, object?>>? ValueProvider { get; set; }

    [Parameter] public RenderFragment<ColumnHeaderRenderingContext<T>>? HeaderTemplate { get;set; }

    [Parameter] public RenderFragment<CellRenderingContext<T>>? CellTemplate { get;set; }

    [Parameter] public EventCallback<Column<T>> OnDragStart { get; set; }

    [Parameter] public EventCallback<Column<T>> OnDragEnd { get; set; }

    [Parameter] public EventCallback<Column<T>> OnDrop { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.Table.AddColumn(this);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.ValueProvider == null)
            this.BuildValueProvider();
    }

    private void BuildValueProvider()
    {
        if(this.PropertyPath == null)
        {
            this.ValueProvider = _ => null;
        }
        else
        {
            var parameterExpression = Expression.Parameter(typeof(T));
            var memberExpression = this.PropertyPath.ToExpression(parameterExpression);
            var bodyExpression = Expression.Convert(memberExpression, typeof(object));
            this.Type = memberExpression.Type;
            this.ValueProvider = Expression.Lambda<Func<T, object?>>(bodyExpression, parameterExpression);
        }
    }

    public object? GetValueFor(T item)
    {
        if (this.ValueProvider == null)
            this.BuildValueProvider();
        var valueProvider = this.ValueProvider!.Compile();
        object? value = null;
        try
        {
            value = valueProvider.Invoke(item);
        }
        catch { }
        if (value == null)
            return null;
        if (string.IsNullOrWhiteSpace(this.Format)
            || value is not IFormattable formattable)
            return value;
        return formattable.ToString(this.Format, this.FormatProvider);
    }

    public void ToggleSortMode()
    {
        if (!this.IsSorteable)
            return;
        int sortModeValue = (int)this.SortMode;
        sortModeValue++;
        if (sortModeValue > 2)
            sortModeValue = 0;
        this.SortMode = (SortMode)sortModeValue;
    }

    public static Column<T> CreateFor(PropertyInfo property)
    {
        var name = property.Name;
        var description = string.Empty;
        var displayOrder = null as int?;
        if (property.TryGetCustomAttribute<DisplayAttribute>(out var displayAttribute))
        {
            name = displayAttribute.Name;
            description = displayAttribute.Description;
            displayOrder = displayAttribute.Order;
        } 
        return new()
        {
            Name = name,
            Description = description,
            DisplayOrder = displayOrder,
            PropertyPath = PropertyPath.Parse(property.Name),
            AutoGenerated = true,
        };
    }

}
