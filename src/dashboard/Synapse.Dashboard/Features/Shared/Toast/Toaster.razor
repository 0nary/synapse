@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@using Microsoft.Extensions.Logging
@namespace Synapse.Dashboard

<div class="toast-container p-3">
    @foreach (var toast in ToastManager.Toasts.OrderByDescending(t => t.CreatedAt))
    {
        var displaySettings = BuildDisplaySettingsFor(toast);
        <div class="toast show" role="alert">
            <div class="toast-header">
                <div class="me-auto">
                    <i class="me-2 oi oi-@displaySettings.IconCssClass"></i><span class="fw-bold">@toast.Header</span>
                </div>
                <button @onclick="() => toast.Hide()" type="button" class="ml-auto mb-1 close">
                    <span>&times;</span>
                </button>
            </div>
            <div class="toast-body">@toast.Body</div>
        </div>
    }
</div>

@code
{

    [Inject]
    protected IToastManager ToastManager { get; private set; }

    ToastDisplaySettings BuildDisplaySettingsFor(Toast toast)
    {
        ToastDisplaySettings settings = new();
        switch (toast.Level)
        {
            case LogLevel.Error:
                settings.BackgroundCssClass = "danger";
                settings.IconCssClass = "bug";
                break;
            case LogLevel.Warning:
                settings.BackgroundCssClass = "warning";
                settings.IconCssClass = "warning";
                break;
            case LogLevel.Information:
                settings.BackgroundCssClass = "info";
                settings.IconCssClass = "info";
                break;
            default:
                throw new NotSupportedException($"The specified toast type '{toast.Level}' is not supported");
        }
        return settings;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.ToastManager.OnShowToast += () => this.StateHasChanged();
        this.ToastManager.OnHideToast += () => this.StateHasChanged();
    }

    class ToastDisplaySettings
    {

        public string BackgroundCssClass { get; set; }

        public string IconCssClass { get; set; }

    }

}
