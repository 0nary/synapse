@namespace Synapse.Dashboard
<th draggable="@(Properties.IsDraggable ? "true" : "false")"
    ondragover="event.preventDefault();"
    @ondragstart="OnStartDrag"
    @ondragend="OnEndDrag"
    @ondrop="OnDropped"
    @onclick="OnClick"
    class="dropzone">
    <span class="column-header">@Properties.Name</span><span class="oi @GetSortIconClass() ms-1"></span>
</th>

@code 
{

    [Parameter]
    public EventCallback<DataColumn> OnSort { get; set; }

    [Parameter]
    public EventCallback<DataColumn> OnDragStart { get; set; }

    [Parameter]
    public EventCallback<DataColumn> OnDragEnd { get; set; }

    [Parameter]
    public EventCallback<DataColumn> OnDrop { get; set; }

    [Parameter]
    public DataColumnProperties Properties { get; set; }

    private string GetSortIconClass()
    {
        return this.Properties.SortMode switch
        {
            SortMode.None => "invisible",
            SortMode.Ascending => "oi-caret-top",
            SortMode.Descending => "oi-caret-bottom",
            _ => throw new NotSupportedException($"The specified {nameof(SortMode)} '{this.Properties.SortMode}' is not supported")
        };
    }

    private async Task OnClick()
    {
        if (!this.Properties.IsSorteable
            || this.Properties.PropertyPath == null)
            return;
        this.Properties.ToggleSortMode();
        await this.OnSort.InvokeAsync(this);
    }

    private async Task OnStartDrag()
    {
        await this.OnDragStart.InvokeAsync(this);
    }

    private async Task OnEndDrag()
    {
        await this.OnDragEnd.InvokeAsync(this);
    }

    private async Task OnDropped()
    {
        await this.OnDrop.InvokeAsync(this);
    }

}
