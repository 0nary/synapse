@using System.ComponentModel.DataAnnotations;
@using System.Linq.Expressions;
@using System.Reflection;
@namespace Synapse.Dashboard

@code
{

    private Func<object, object> valueResolver;

    [CascadingParameter]
    private DataTable Table { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public Type ElementType { get; set; }

    [Parameter]
    public PropertyPath PropertyPath { get; set; }

    [Parameter]
    public string Format { get; set; }

    [Parameter]
    public IFormatProvider FormatProvider { get; set; }

    [Parameter]
    public bool IsDraggable { get; set; } = true;

    [Parameter]
    public bool IsFilterable { get; set; } = true;

    [Parameter]
    public bool IsSorteable { get; set; } = true;

    [Parameter]
    public bool IsVisible { get; set; } = true;

    [Parameter]
    public int DisplayOrder { get; set; }

    [Parameter]
    public Func<object, object> ValueProvider { get; set; }

    [Parameter]
    public bool AutoGenerated { get; set; }

    public Type Type { get; private set; }

    public SortMode SortMode { get; internal set; }

    private void BuildValueProvider()
    {
        if (this.ElementType != null
            && this.PropertyPath != null)
        {
            var parameterExpression = Expression.Parameter(typeof(object));
            var pathExpression = this.PropertyPath.ToExpression(Expression.Convert(parameterExpression, this.ElementType));
            var bodyExpression = Expression.Convert(pathExpression, typeof(object));
            this.Type = pathExpression.Type;
            this.valueResolver = Expression.Lambda<Func<object, object>>(bodyExpression, parameterExpression).Compile();
            this.ValueProvider = elem =>
            {
                object value = this.valueResolver.Invoke(elem);
                if (value != null
                    && value.GetType().IsEnum
                    && value.GetType().GetField(Enum.GetName(value.GetType(), value)).TryGetCustomAttribute(out DisplayAttribute displayAttribute))
                    value = displayAttribute.Name;
                return value;
            };
        }
        else
        {
            this.ValueProvider = elem => null;
        }
    }

    public object GetValueFor(object elem)
    {
        if (this.ValueProvider == null)
            this.BuildValueProvider();
        object value = this.ValueProvider!(elem);
        if (string.IsNullOrWhiteSpace(this.Format)
            || value is not IFormattable formattable)
            return value;
        return formattable.ToString(this.Format, this.FormatProvider);
    }

    public void SetIsVisible(bool isVisible)
    {
        this.IsVisible = isVisible;
    }

    public void ToggleSortMode()
    {
        if (!this.IsSorteable)
            return;
        int sortModeValue = (int)this.SortMode;
        sortModeValue++;
        if (sortModeValue > 2)
            sortModeValue = 0;
        this.SortMode = (SortMode)sortModeValue;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (this.ValueProvider == null)
            this.BuildValueProvider();
        if (!this.AutoGenerated)
            this.Table.AddColumn(this);
    }

    public static DataColumnProperties CreateFor(PropertyInfo property)
    {
        return new()
        {
            Name = property.GetDisplayName(),
            AutoGenerated = true,
            ElementType = property.ReflectedType,
            PropertyPath = PropertyPath.Parse(property.Name),
            DisplayOrder = property.GetDisplayOrder(),
            IsVisible = true
        };
    }

}