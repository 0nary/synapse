@using Neuroglia.Data.Flux;
@using System.Reactive.Linq;
@namespace Synapse.Dashboard
@typeparam T
@inject IStore Store;
@inject IDispatcher Dispatcher;

<table class="@TableClass">
    <thead>
        <tr class="@HeaderRowClass">
            @foreach(var column in columns.Where(c => c.IsVisible))
            {
                <th class="@HeaderClass">
                    @if(column.HeaderTemplate == null)
                        @DefaultHeaderTemplate(new(this, column))
                    else
                        @column.HeaderTemplate(new(this, column))
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @if(items != null)
        {
            @foreach (var item in items)
            {
                <tr class="@RowClass">
                    @foreach(var column in columns.Where(c => c.IsVisible))
                    {
                        <td class="@CellClass">
                            @if(column.CellTemplate == null)
                                @DefaultCellTemplate(new(this, column, item))
                            else
                                @column.CellTemplate(new(this, column, item))
                        </td>
                    }
                </tr>
            }
        }
    </tbody>
</table>

@code 
{

    private List<DataTableColumn<T>> columns = new();
    private IEnumerable<T>? items;

    [Parameter]
    public string? TableClass { get; set; } = "table table-stripped table-hover";

    [Parameter]
    public string? HeaderRowClass { get; set; }

    [Parameter]
    public string? HeaderClass { get; set; }

    [Parameter]
    public string? RowClass { get; set; }

    [Parameter]
    public string? CellClass { get; set; }

    [Parameter]
    public RenderFragment Columns { get; set; }

    [Parameter]
    public bool AutoGenerateColumns { get; set; } = true;

    [Parameter]
    public RenderFragment<RenderTableHeaderContext<T>> DefaultHeaderTemplate { get; set; } = context => __builder =>
    {
        __builder.OpenComponent(0, typeof(DataTableHeader<T>));
        __builder.AddAttribute(0, nameof(DataTableHeader<T>.RenderContext), context);
        __builder.CloseComponent();
    };

    [Parameter]
    public RenderFragment<RenderTableCellContext<T>> DefaultCellTemplate { get; set; } = context => __builder =>
    {
        __builder.OpenComponent(0, typeof(DataTableCell<T>));
        __builder.AddAttribute(0, nameof(DataTableCell<T>.RenderContext), context);
        __builder.CloseComponent();
    };

    [Parameter]
    public IEnumerable<T> ItemsSource { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (!this.AutoGenerateColumns)
            return;
        foreach(var property in typeof(T).GetProperties())
        {
            this.columns.Add(DataTableColumn<T>.CreateFor(property));
        }
        this.StateHasChanged();
    }

}
