@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@inherits ModalBase

@if (Active && Container != null)
{
    <div class="add-state-contextual-menu border-dark d-flex flex-column" style="top: @(clientY)px; left: @(clientX)px;">
        <button class="btn btn-outline-dark" title="Inject state" @onclick="(async () => await Container.ShowEditor<InjectStateDefinition>(typeof(InjectStateModal), predecessor?.State.Name))">
            Inject
            <svg width="16" height="16">
                <use xlink:href="#inject-symbol" />
            </svg>
        </button>
        <button class="btn btn-outline-dark" title="Operation state">
            Operation
            <svg width="16" height="16">
                <use xlink:href="#operation-symbol" />
            </svg>
        </button>
        <button class="btn btn-outline-dark" title="Sleep state">
            Sleep
            <svg width="16" height="16">
                <use xlink:href="#sleep-symbol" />
            </svg>
        </button>
        <button class="btn btn-outline-dark" title="Event state">
            Event
            <svg width="16" height="16">
                <use xlink:href="#event-symbol" />
            </svg>
        </button>
        <button class="btn btn-outline-dark" title="Switch state">
            Switch
            <svg width="16" height="16">
                <use xlink:href="#switch-symbol" />
            </svg>
        </button>
        <button class="btn btn-outline-dark" title="Parallel state">
            Parallel
            <svg width="16" height="16">
                <use xlink:href="#parallel-symbol" />
            </svg>
        </button>
        <button class="btn btn-outline-dark" title="ForEach state">
            ForEach
            <svg width="16" height="16">
                <use xlink:href="#foreach-symbol" />
            </svg>
        </button>
        <button class="btn btn-outline-dark" title="Callback state">
            Callback
            <svg width="16" height="16">
                <use xlink:href="#callback-symbol" />
            </svg>
        </button>
    </div>
    <div class="add-state-contextual-menu__backdrop" @onclick="HideAsync"></div>
}

@code {
    [CascadingParameter]
    public virtual WorkflowVisualEditor? Container { get; set; }

    protected virtual StateNodeViewModel? predecessor { get; set; }

    protected virtual double clientX { get; set; }

    protected virtual double clientY { get; set; }

    public virtual async Task ShowAsync(double clientX, double clientY, StateNodeViewModel? predecessor)
    {
        this.predecessor = predecessor;
        this.clientX = clientX;
        this.clientY = clientY;
        await base.ShowAsync();
    }
}
