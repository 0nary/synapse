@*
 * Copyright © 2022-Present The Synapse Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*@
@namespace Synapse.Dashboard
@using Neuroglia.Serialization
@inherits StateEditorModal<StateModel<InjectStateDefinition>>
@inject IMonacoEditorHelper MonacoEditorHelper
@inject IJsonSerializer Serializer

@if (model != null && editContext != null) {
    <div class="modal fade @(Active ? "show d-block" : "d-none")" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered @modalSizeClass" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Inject state</h5>
                    @if (ShowCloseIcon)
                    {
                        <button type="button" class="close btn" data-dismiss="modal" aria-label="Close" @onclick="HideAsync">
                            <span class="oi oi-x"></span>
                        </button>
                    }                
                </div>
                <div class="modal-body">
                    <EditForm EditContext="editContext" OnValidSubmit="@OnValidSubmitAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label for="state-name" class="form-label">Name</label>
                            <InputText @bind-Value="model.State.Name" id="state-name" class="form-control" placeholder="Name" />
                            <ValidationMessage For="@(() => model.Name)" class="form-text" />
                        </div>
                        <div class="mb-3">
                            <InputDynamicObject 
                                Id="state-data"
                                Label="Data"  
                                @bind-Value="model.State.Data" 
                                ValidationFor="@(() => model.State.Data)"
                            />
                        </div>
                        <div class="mb-3">
                            <InputDynamicObject 
                                Id="state-metadata"
                                Label="Metadata"
                                @bind-Value="model.State.Metadata"
                                ValidationFor="@(() => model.State.Metadata)"
                            />
                        </div>
                        <div class="mb-3">
                            <InputStateDataFilter
                                Id="state-data-filter"
                                Label="State data filter"
                                @bind-Value="model.State.DataFilter"
                                ValidationFor="@(() => model.State.DataFilter)"
                            />
                        </div>
                        <div>
                            <button class="btn btn-outline-dark" type="submit">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    @if (Active)
    {
        <div class="modal-backdrop fade show"></div>
    }
}

@code {
    protected MonacoEditor editor = null!;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.editor != null) {
            if (this.model.State!.Data == null)
            {
                this.model.State!.Data = this.Serializer.Deserialize<DynamicObject>("{}");
            }
            await this.editor.SetValue(this.Serializer.Serialize(this.model.State!.Data));
        }
    }

    protected async Task OnEditorChange(ModelContentChangedEvent e)
    {
        try
        {
            this.model.State!.Data = this.Serializer.Deserialize<DynamicObject>(await this.editor.GetValue());
        }
        catch (Exception ex)
        {
            this.model.State!.Data = this.Serializer.Deserialize<DynamicObject>("{}");
        }
    }

    protected override async Task OnValidSubmitAsync()
    {
        await base.OnValidSubmitAsync();
        Console.WriteLine(this.Serializer.Serialize(this.Model));
    }
}
