@namespace Synapse.Dashboard
@using Neuroglia.Serialization
@using ServerlessWorkflow.Sdk.Services.FluentBuilders
@inject Neuroglia.Mapping.IMapper Mapper
@inject IWorkflowGraphEventDispatcher WorkflowGraphEventDispatcher
@inject IClonerService Cloner
@implements IDisposable

<WorkflowSummaryModal @ref="workflowSummaryModal" Model="workflowSummary" OnSaveModel="OnSaveSummaryModel" />
<CascadingValue Value="@this">
    <AddStateContextualMenu @ref="addStateContextualMenu" />
</CascadingValue>
@if (stateModalType != null && stateModalParameters != null) {
    <CascadingValue Value="@states">
        <DynamicStateModal @ref="stateModal" Type="stateModalType" Parameters="stateModalParameters"/>
    </CascadingValue>
}

<div class="container-fluid h-100">
    <div class="row h-100">
        <div class="workflow-visual-editor h-100">
            @if (workflowDefinition != null)
            {
                <WorkflowDiagram WorkflowDefinition="workflowDefinition" EditMode="true" />
            }
            @if (workflowSummaryModal != null) {
                <button class="btn__workflow-details btn btn-outline-dark" title="Workflow details" @onclick="workflowSummaryModal.ShowAsync">
                    <span class="oi oi-cog"></span> 
                    <span class="btn-label">&nbsp; Workflow details</span>
                </button>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public virtual EventCallback<WorkflowDefinition> OnSubmitWorkflowDefinition { get; set; }
    [Parameter]
    public bool CreateDisabled { get; set; }

    protected WorkflowDefinition workflowDefinition = new WorkflowDefinition();

    protected WorkflowSummaryModel workflowSummary = new WorkflowSummaryModel();
    protected ICollection<StateDefinition> states = new List<StateDefinition>();
    protected WorkflowSummaryModal workflowSummaryModal = null!;

    protected AddStateContextualMenu addStateContextualMenu = null!;
    protected DynamicStateModal stateModal = null!;
    protected Type? stateModalType = null;
    protected IDictionary<string, object>? stateModalParameters = null!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.WorkflowGraphEventDispatcher.AddStateAsync += this.OnAddStateAsync;
        this.WorkflowGraphEventDispatcher.EditStateAsync += this.OnEditStateAsync;
        this.WorkflowGraphEventDispatcher.MoveStateBackwardAsync += this.OnMoveStateBackwardAsync;
        this.WorkflowGraphEventDispatcher.MoveStateForwardAsync += this.OnMoveStateForwardAsync;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender) {
            await this.workflowSummaryModal.ShowAsync();
            this.StateHasChanged();
        }
    }

    protected virtual async Task OnMoveStateForwardAsync(StateNodeViewModel sender, MouseEventArgs e)
    {
        StateDefinition? origin = null;
        StateDefinition center, tail;
        center = sender.State;
        if (center.IsEnd)
            return;
        tail = this.states.First(state => state.Name == center.TransitionToStateName);
        if (!sender.IsFirst)
        {
            origin = this.states.FirstOrDefault(state => state.TransitionToStateName == center.Name);
        }
        await this.SortAsync(origin, center, tail);
    }

    protected virtual async Task OnMoveStateBackwardAsync(StateNodeViewModel sender, MouseEventArgs e)
    {
        if (sender.IsFirst)
            return;
        StateDefinition? origin = null;
        StateDefinition center, tail;
        tail = sender.State;
        center = this.states.First(state => state.TransitionToStateName == tail.Name);
        origin = this.states.FirstOrDefault(state => state.TransitionToStateName == center.Name);
        await this.SortAsync(origin, center, tail);
    }

    protected virtual async Task SortAsync(StateDefinition? origin, StateDefinition center, StateDefinition tail)
    {
        if (origin != null)
        {
            origin.TransitionToStateName = tail.Name;
        }
        else
        {
            this.workflowSummary.StartStateName = tail.Name;
        }
        if (tail.IsEnd) {
            center.IsEnd = true;
            center.TransitionToStateName = null;
        }
        else
        {
            center.TransitionToStateName = tail.TransitionToStateName;
        }
        tail.IsEnd = false;
        tail.TransitionToStateName = center.Name;
        this.RefreshWorkflow();
        this.StateHasChanged();
        await Task.CompletedTask;
    }

    protected virtual async Task OnAddStateAsync(StateNodeViewModel? sender, MouseEventArgs e)
    {
        await this.addStateContextualMenu.ShowAsync(e.ClientX, e.ClientY, sender);
        this.StateHasChanged();
    }

    protected virtual async Task OnEditStateAsync(StateNodeViewModel sender, MouseEventArgs e)
    {
        string? fromStateName = this.states.Where(state => state.TransitionToStateName == sender.State.Name)
                .Select(state => state.Name)
                .FirstOrDefault();
        await this.ShowEditor(typeof(InjectStateModal), fromStateName, sender.State as InjectStateDefinition, true);
        this.StateHasChanged();
    }

    public virtual async Task ShowEditor<T>(Type modalType, string? fromStateName = null, T? model = null, bool update = false)
        where T : StateDefinition, new()
    {
        if (this.addStateContextualMenu != null && this.addStateContextualMenu.Active) {
            await this.addStateContextualMenu.HideAsync();
        }
        var stateModel = new StateModel<T>(model != null ? this.Cloner.Clone(model) : null, fromStateName, update);
        this.stateModalParameters = new Dictionary<string, object>()
        {
            { "Model", stateModel! },
            { "OnSaveModel", EventCallback.Factory.Create<StateModel<T>>(this, this.OnSaveStateDefinition) },
            { "OnActiveChange", EventCallback.Factory.Create<bool>(this, this.OnEditorActiveChange) }
        };
        this.stateModalType = modalType;
        this.StateHasChanged();
    }

    protected virtual void OnEditorActiveChange(bool active)
    {
        if (!active)
        {
            this.stateModalParameters = null;
            this.stateModalType = null;
        }
    }

    protected virtual void OnSaveSummaryModel(WorkflowSummaryModel model)
    {
        this.workflowSummary = model;
        this.RefreshWorkflow();
    }

    protected virtual async Task OnSaveStateDefinition<T>(StateModel<T> stateModel)
        where T : StateDefinition, new()
    {
        string stateName = ((StateModel<T>?)this.stateModalParameters?["Model"])?.State.Name ?? stateModel.State.Name; // if the user edited the state name, take the one from the parameters
        var existingState = this.states.FirstOrDefault(state => state.Name == stateName);
        if (existingState == null)
        {
            this.states.Add(stateModel.State);
        }
        else
        {
            var statesList = this.states.ToList();
            var index = statesList.IndexOf(existingState);
            statesList.RemoveAt(index);
            statesList.Insert(index, stateModel.State);
            this.states = statesList;
        }
        if (string.IsNullOrWhiteSpace(stateModel.State.TransitionToStateName))
        {
            stateModel.State.IsEnd = true;
        }
        if (string.IsNullOrWhiteSpace(stateModel.FromStateName))
        {
            this.workflowSummary.StartStateName = stateModel.State.Name;
        }
        else
        {
            var fromState = this.states.FirstOrDefault(state => state.Name == stateModel.FromStateName);
            if (fromState == null)
            {
                throw new NullReferenceException($"Unabled to find the previous state named '{stateModel.FromStateName}' for state '{stateModel.State.Name}'");
            }
            fromState.TransitionToStateName = stateModel.State.Name;
            fromState.IsEnd = false;
        }
        this.RefreshWorkflow();
        await this.HideEditorAsync();
    }

    protected virtual void RefreshWorkflow()
    {
        if (this.workflowSummary == null)
        {
            throw new NullReferenceException("The workflow summary cannot be null");
        }
        var workflowDefinition = this.Mapper.Map<WorkflowDefinition>(this.workflowSummary);
        if (this.states.Any())
        {
            foreach(var state in this.states)
            {
                workflowDefinition.States.Add(state);
            }
        }
        this.workflowDefinition = workflowDefinition;
    }

    protected virtual async Task HideEditorAsync()
    {        
        await ((ModalBase)this.stateModal.Instance!).HideAsync();
    }

    private bool disposed;
    protected virtual void Dispose(bool disposing)
    {
        if (!this.disposed)
        {
            this.WorkflowGraphEventDispatcher.AddStateAsync -= this.OnAddStateAsync;
            this.WorkflowGraphEventDispatcher.EditStateAsync -= this.OnEditStateAsync;
            this.WorkflowGraphEventDispatcher.MoveStateBackwardAsync -= this.OnMoveStateBackwardAsync;
            this.WorkflowGraphEventDispatcher.MoveStateForwardAsync -= this.OnMoveStateForwardAsync;
            this.disposed = true;
        }
    }

    public void Dispose()
    {
        this.Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }
}
