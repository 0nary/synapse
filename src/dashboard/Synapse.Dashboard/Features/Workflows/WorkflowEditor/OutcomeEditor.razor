@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

<table class="table table-striped">
    <tbody>
        <tr>
            <td>Type</td>
            <td>
                <select class="form-control" @onchange="OnOutcomeTypeChangedAsync">
                    @if(this.Outcome.Type == WorkflowOutcomeType.End)
                    {
                        <option value="@EnumHelper.Stringify(SwitchCaseOutcomeType.End)" selected>End</option>
                        <option value="@EnumHelper.Stringify(SwitchCaseOutcomeType.Transition)">Transition</option>
                    }
                    else
                    {
                        <option value="@EnumHelper.Stringify(SwitchCaseOutcomeType.End)">End</option>
                        <option value="@EnumHelper.Stringify(SwitchCaseOutcomeType.Transition)" selected>Transition</option>
                    }
                </select>
            </td>
        </tr>
    </tbody>
</table>

@switch (Outcome.Type)
{
    case WorkflowOutcomeType.End:
        <EndEditor OnChange="OnChange" />
        break;
    case WorkflowOutcomeType.Transition:
        <TransitionEditor Transition="Outcome.Definition as TransitionDefinition" ForbiddenTransitions="ForbiddenTransitions" OnChange="OnChange" />
        break;
    default:
        <span class="danger">The specified outcome type '@EnumHelper.Stringify(Outcome.Type)' is not supported</span>
        break;
}

@code 
{

    [CascadingParameter] public WorkflowDefinition Workflow { get; set; } = null!;

    [Parameter] public WorkflowOutcome Outcome { get; set; } = new(WorkflowOutcomeType.End);

    [Parameter] public List<StateDefinition> ForbiddenTransitions { get; set; } = new();

    [Parameter] public EventCallback<WorkflowOutcome> OnChange { get; set; }

    protected virtual async Task OnOutcomeTypeChangedAsync(ChangeEventArgs e)
    {
        this.Outcome = new WorkflowOutcome(EnumHelper.Parse<WorkflowOutcomeType>((string)e.Value!));
        await this.OnChange.InvokeAsync(this.Outcome);
        this.StateHasChanged();
    }

}
