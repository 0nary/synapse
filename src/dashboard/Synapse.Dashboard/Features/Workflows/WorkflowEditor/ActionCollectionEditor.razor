@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

@if(Actions != null)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var action in Actions)
            {
                <ExpandableDataRow>
                    <Header>
                        <td>@action.Name</td>
                        <td><span class="badge bg-secondary">@action.Type</span></td>
                        <td><button @onclick="async () => await OnDeleteActionAsync(action)" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="oi oi-trash"></small></button></td>
                    </Header>
                    <Body>
                        <td colspan="3">
                            <ActionEditor Action="action" OnChange="OnChange" />
                        </td>
                    </Body>
                </ExpandableDataRow>
            }
        </tbody>
    </table>
    <button class="btn btn-block btn-warning text-white w-100" @onclick="OnCreateActionAsync">Create action</button>
}
else
{
    
}

@code {

    [Parameter] public List<ActionDefinition>? Actions { get; set; }

    [Parameter] public EventCallback OnChange { get; set; }

    protected virtual async Task OnCreateActionAsync()
    {
        if (this.Actions == null)
            return;
        var action = new ActionDefinition() { Name = $"undefined-{this.Actions.Count() + 1}", Function = new() { RefName = "undefined" } };
        this.Actions.Add(action);
             await this.OnChange.InvokeAsync();
        this.StateHasChanged();
    }

    protected virtual async Task OnDeleteActionAsync(ActionDefinition action)
    {
        this.Actions?.Remove(action);
        await this.OnChange.InvokeAsync();
        this.StateHasChanged();
    }

}
