@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

@if (branches != null)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Action Execution Mode</th>
                <th>Actions</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var branch in branches)
            {
                <ExpandableDataRow>
                    <Header>
                        <td>@branch.Name</td>
                        <td><span class="badge bg-secondary">@EnumHelper.Stringify(branch.ActionMode)</span></td>
                        <td>@branch.Actions?.Count</td>
                        <td><button @onclick="async () => await OnDeleteBranchAsync(branch)" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-trash"></small></button></td>
                    </Header>
                    <Body>
                        <td colspan="4">
                            <BranchEditor 
                            Branch="branch"
                            OnChange="OnChange" />
                        </td>
                    </Body>
                </ExpandableDataRow>
            }
        </tbody>
    </table>
    <button class="btn btn-block btn-primary text-white w-100" @onclick="OnCreateBranchAsync">Create branch</button>
}
else
{
    <Loader />
}

@code {

    private List<BranchDefinition>? branches { get; set; }
    [Parameter] public List<BranchDefinition>? Branches { get; set; }

    [Parameter] public EventCallback OnChange { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.branches != this.Branches) {
            this.branches = this.Branches;
        }
    }

    protected virtual async Task OnCreateBranchAsync()
    {
        if (this.branches == null)
            return;
        var branch = new BranchDefinition() { Name = $"branch-{this.branches.Count() + 1}" };
        this.branches.Add(branch);
             await this.OnChange.InvokeAsync();
        this.StateHasChanged();
    }

    protected virtual async Task OnDeleteBranchAsync(BranchDefinition branch)
    {
        this.branches?.Remove(branch);
        await this.OnChange.InvokeAsync();
        this.StateHasChanged();
    }

}
