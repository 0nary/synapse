@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

<table class="table table-striped">
    <tbody>
        <tr>
            <td>Terminate</td>
            <td class="d-flex justify-content-end">
                <input type="checkbox" value="@end?.Terminate" checked="@end?.Terminate" title="Indicates whether or not to terminate the execution of pending activities" class="form-check-input"
                @onchange="async e => await OnChangedAsync(ed => ed.Terminate = (bool)e.Value!)"/>
            </td>
        </tr>
        <tr>
            <td>Compensate</td>
            <td class="d-flex justify-content-end">
                <input type="checkbox" value="@end?.Compensate" checked="@end?.Compensate" title="Indicates whether or not to trigger compensation" class="form-check-input"
                @onchange="async e => await OnChangedAsync(ed => ed.Compensate = (bool)e.Value!)"/>
            </td>
        </tr>
    </tbody>
</table>

@code {

    private EndDefinition? end;
    [Parameter] public EndDefinition? End { get; set; }

    private ControlFlow controlFlow;
    [Parameter] public ControlFlow ControlFlow{ get; set; }

    [Parameter] public EventCallback<WorkflowOutcome> OnChange { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        var updated = false;
        if(this.end != this.End)
        {
            this.end = this.End;
            updated = true;
        }
        if(this.controlFlow != this.ControlFlow)
        {
            this.controlFlow = this.ControlFlow;
            updated = true;
        }
        if (!updated)
            return;
    }

    protected virtual async Task OnChangedAsync(Action<EndDefinition> patch)
    {
        if (this.end == null)
            this.end = new();
        patch(this.end);
        if (!this.end.Terminate && !this.end.Compensate)
            this.end = null;
        await this.OnChange.InvokeAsync(new(WorkflowOutcomeType.End, this.end));
        this.StateHasChanged();
    }

}
