@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@using Newtonsoft.Json.Schema
@using System.Dynamic
@implements IDisposable

@if(Workflow != null)
{

    <CascadingValue Value="Workflow">

        <!-- General -->
        <div class="border border-secondary rounded-2 p-3 mb-3">
            <Expander IsExpanded="@expandedSections["general"]" OnToggleExpand="@(isExpanded => OnToggleExpand("general", isExpanded))">
                <Header>
                    <h5><span class="oi oi-info me-2"></span>General</h5>
                </Header>
                <Body>
                    <table class="table">
                        <tbody>
                            <tr><td>Spec version</td><td><select required value="@Workflow.SpecVersion" @onchange="async e => await OnPropertyChangedAsync(nameof(Workflow.SpecVersion), d => d.SpecVersion = (string)e.Value!)" class="form-control bg-secondary text-white">
                                <option value="0.8">0.8</option>
                            </select></td></tr>
                            <tr><td>Id</td>
                            <td>
                                <div class="input-group mb-3">
                                    <input type="text" placeholder="Id" readonly="@autoGenerateId" required value="@Workflow.Id" @onchange="async e => await OnPropertyChangedAsync(nameof(Workflow.Id), d => d.Id = (string)e.Value!)" class="form-control" />
                                    <div class="input-group-text">
                                        <input class="form-check-input mt-0" type="checkbox" checked="@autoGenerateId" @onchange="async e => await OnAutoGenerateIdChanged((bool)e.Value)">
                                        <label class="ms-1" title="Auto-generate the workflow id based on its sluggified, kebab-cased name">Auto-generate</label>
                                    </div>
                                </div>
                            </td></tr>
                            <tr><td>Version</td><td><input type="text" placeholder="Version" required value="@Workflow.Version" @onchange="async e => await OnPropertyChangedAsync(nameof(Workflow.Version), d => d.Version = (string)e.Value!)" class="form-control" /></td></tr>
                            <tr><td>Name</td><td><input type="text" placeholder="Name" required value="@Workflow.Name" @onchange="async e => await OnNameChangedAsync((string?)e.Value)" class="form-control" /></td></tr>
                            <tr><td>Description</td><td><textarea type="text" placeholder="Description" value="@Workflow.Description" @onchange="async e => await OnPropertyChangedAsync(nameof(Workflow.Description), d => d.Description = (string)e.Value!)" class="form-control"></textarea></td></tr>
                            <tr><td>Expression language</td><td><select required @onchange="async e => await OnPropertyChangedAsync(nameof(Workflow.ExpressionLanguage), d => d.ExpressionLanguage = (string)e.Value!)" class="form-control bg-secondary text-white">
                                <option value="jq">jq</option>
                            </select></td></tr>
                            <tr><td>Keep active</td><td><input type="checkbox" placeholder="0.1.0" required value="@Workflow.KeepActive" @onchange="async e => await OnPropertyChangedAsync(nameof(Workflow.KeepActive), d => d.KeepActive = (bool)e.Value!)" class="form-check-input" /></td></tr>
                        </tbody>
                    </table>
                </Body>
            </Expander>
        </div>
    
        <!-- States -->
        <div class="border border-secondary rounded-2 p-3 mb-3">
            <Expander IsExpanded="@expandedSections["states"]" OnToggleExpand="@(isExpanded => OnToggleExpand("states", isExpanded))">
                <Header>
                    <h5><span class="oi oi-fork me-2"></span>States</h5>
                </Header>
                <Body>
                    @if(Workflow.States.Any())
                    {
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Type</th>
                                    <th>Outcome</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                    @foreach (var state in Workflow.States)
                                    {
                                        <ExpandableDataRow>
                                            <Header>
                                                <td>@state.Name</td>
                                                <td><span class="badge bg-secondary">@EnumHelper.Stringify(state.Type)</span></td>
                                                <td>@(state.IsEnd ? "End workflow" : $"Transition to '{state.TransitionToStateName}'")</td>
                                                <td>
                                                    @if(state == Workflow.GetStartState())
                                                    {
                                                        <span class="badge bg-success text-white mx-1" title="First state in the workflow">start</span>
                                                    }
                                                    @if (state.IsEnd)
                                                    {
                                                        <span class="badge bg-warning text-white mx-1" title="Ends the workflow">end</span>
                                                    }
                                                    @if(!string.IsNullOrWhiteSpace(state.CompensatedBy))
                                                    {
                                                        <span class="badge bg-primary text-white mx-1" title="Is compensated by another state">compensated</span>
                                                    }
                                                    @if(state.Errors != null
                                                    && state.Errors.Any())
                                                    {
                                                        <span class="badge bg-danger text-white mx-1" title="Is fault tolerant and handles defined errors">fault</span>
                                                    }
                                                </td>
                                                <td><button @onclick="async () => await OnPropertyChangedAsync(nameof(Workflow.States), d => d.States?.Remove(state))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="oi oi-trash"></small></button></td>
                                            </Header>
                                            <Body>
                                                <td colspan="5">
                                                    <StateEditor State="@state" OnChange="async () => await OnStatePropertyChangedAsync(state)" />
                                                </td>
                                            </Body>
                                        </ExpandableDataRow>
                                    }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <button class="btn btn-block btn-warning text-white w-100" @onclick="OnCreateStateAsync">Create start state</button>
                    }
                </Body>
            </Expander>
        </div>

        <!-- Events -->
        <div class="border border-secondary rounded-2 p-3 mb-3">
            <Expander IsExpanded="@expandedSections["events"]" OnToggleExpand="@(isExpanded => OnToggleExpand("events", isExpanded))">
                <Header>
                    <h5><span class="oi oi-cloud me-2"></span>Events</h5>
                </Header>
                <Body>
                    <table class="table">
                         <thead>
                            <tr>
                                <th>Name</th>
                                <th>Kind</th>
                                <th>Source</th>
                                <th>Type</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if(Workflow.Events != null)
                            {
                                @foreach (var e in Workflow.Events)
                                {
                                    <tr>
                                        <td>@e.Name</td>
                                        <td><span class="badge bg-secondary">@EnumHelper.Stringify(e.Kind)</span></td>
                                        <td>@e.Source</td>
                                        <td>@e.Type</td>
                                        <td><button @onclick="async () => await OnPropertyChangedAsync(nameof(Workflow.Events), d => d.Events?.Remove(e))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="oi oi-trash"></small></button></td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </Body>
            </Expander>
        </div>

        <!-- Functions -->
        <div class="border border-secondary rounded-2 p-3 mb-3">
            <Expander IsExpanded="@expandedSections["functions"]" OnToggleExpand="@(isExpanded => OnToggleExpand("functions", isExpanded))">
                <Header>
                    <h5><span class="oi oi-terminal me-2"></span>Functions</h5>
                </Header>
                <Body>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Type</th>
                                <th>Operation</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if(Workflow.Functions != null)
                            {
                                @foreach (var function in Workflow.Functions)
                                {
                                    <ExpandableDataRow>
                                        <Header>
                                            <td>@function.Name</td>
                                            <td><span class="badge bg-secondary">@EnumHelper.Stringify(function.Type)</span></td>
                                            <td class="text-break"><a href="@function.Operation" target="_blank">@function.Operation</a></td>
                                            <td><button @onclick="async () => await OnPropertyChangedAsync(nameof(Workflow.Functions), d => d.Functions?.Remove(function))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="oi oi-trash"></small></button></td>
                                        </Header>
                                        <Body>
                                            <td colspan="4">
                                                <FunctionEditor Function="@function" OnChange="OnPropertyChanged" />
                                            </td>
                                        </Body>
                                    </ExpandableDataRow>
                                }
                            }
                        </tbody>
                    </table>
                    <button class="btn btn-block btn-warning text-white w-100" @onclick="OnCreateFunctionAsync">Create new function</button>
                </Body>
            </Expander>
        </div>

        <!-- Secrets -->
        <div class="border border-secondary rounded-2 p-3 mb-3">
            <Expander IsExpanded="@expandedSections["secrets"]" OnToggleExpand="@(isExpanded => OnToggleExpand("secrets", isExpanded))">
                <Header>
                    <h5><span class="oi oi-key me-2"></span>Secrets</h5>
                </Header>
                <Body>
                    <table class="table">
                        <tbody>
                            @if(Workflow.Secrets != null)
                            {
                                @foreach (var secret in Workflow.Secrets)
                                {
                                    <tr>
                                        <td>@secret</td>
                                        <td><button @onclick="async () => await OnPropertyChangedAsync(nameof(Workflow.Secrets), d => d.Secrets?.Remove(secret))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="oi oi-trash"></small></button></td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </Body>
            </Expander>
        </div>

        <!-- Authentication -->
        <div class="border border-secondary rounded-2 p-3 mb-3">
            <Expander IsExpanded="@expandedSections["authentication"]" OnToggleExpand="@(isExpanded => OnToggleExpand("authentication", isExpanded))">
                <Header>
                    <h5><span class="oi oi-lock-locked me-2"></span>Authentication</h5>
                </Header>
                <Body>
                    <table class="table">
                         <thead>
                            <tr>
                                <th>Name</th>
                                <th>Scheme</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if(Workflow.Auth != null)
                            {
                                @foreach (var auth in Workflow.Auth)
                                {
                                    <tr>
                                        <td>@auth.Name</td>
                                        <td><span class="badge bg-secondary">@EnumHelper.Stringify(auth.Scheme)</span></td>
                                        <td><button @onclick="async () => await OnPropertyChangedAsync(nameof(Workflow.Auth), d => d.Auth?.Remove(auth))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="oi oi-trash"></small></button></td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </Body>
            </Expander>
        </div>

        <!-- Annotations -->
        <div class="border border-secondary rounded-2 p-3 mb-3">
            <Expander IsExpanded="@expandedSections["annotations"]" OnToggleExpand="@(isExpanded => OnToggleExpand("annotations", isExpanded))">
                <Header>
                    <h5><span class="oi oi-pencil me-2"></span>Annotations</h5>
                </Header>
                <Body>
                    <table class="table">
                        <tbody>
                            @if(Workflow.Annotations != null)
                            {
                                @foreach (var annotation in Workflow.Annotations)
                                {
                                    <tr>
                                        <td>@annotation</td>
                                        <td><button @onclick="async () => await OnPropertyChangedAsync(nameof(Workflow.Annotations), d => d.Annotations?.Remove(annotation))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="oi oi-trash"></small></button></td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </Body>
            </Expander>
        </div>

        <!-- Metadata -->
        <div class="border border-secondary rounded-2 p-3 mb-3">
            <Expander IsExpanded="@expandedSections["metadata"]" OnToggleExpand="@(isExpanded => OnToggleExpand("metadata", isExpanded))">
                <Header>
                    <h5><span class="oi oi-puzzle-piece me-2"></span>Metadata</h5>
                </Header>
                <Body>
                    <table class="table">
                        <tbody>
                            @if(Workflow.Metadata != null)
                            {
                                var expando = (IDictionary<string, object>)Workflow.Metadata.ToObject()!;
                                @foreach (var metadata in expando)
                                {
                                    <tr>
                                        <td>@metadata.Key</td>
                                       @* <td><button @onclick="async () => await OnPropertyChanged(nameof(Definition.Version), d => d.Metadata?.Remove(metadata.Key))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="oi oi-trash"></small></button></td>*@
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </Body>
            </Expander>
        </div>

    </CascadingValue>

}
else
{
     <Loader />
}

@code {

    private bool autoGenerateId = true;
    private Dictionary<string, bool> expandedSections = new()
    {
        { "general", true },
        { "states", true },
        { "events", false },
        { "functions", false },
        { "secrets", false },
        { "authentication", false },
        { "annotations", false },
        { "metadata", false }
    };

    [Parameter] public WorkflowDefinition? Workflow { get; set; }
    [Parameter] public EventCallback OnPropertyChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected virtual void OnToggleExpand(string sectionName, bool isExpanded)
    {
        this.expandedSections[sectionName] = isExpanded;
        this.StateHasChanged();
    }

    protected virtual async Task OnCreateStateAsync()
    {
        if (this.Workflow == null)
            return;
        var state = new OperationStateDefinition()
        {
            Name = $"undefined-{Workflow.States.Count + 1}",
            IsEnd = true
        };
        await this.OnPropertyChangedAsync(nameof(Workflow.States), d => d.States.Add(state));
    }

    protected virtual async Task OnCreateFunctionAsync()
    {
        if (this.Workflow == null)
            return;
        var function = new FunctionDefinition();
        await this.OnPropertyChangedAsync(nameof(Workflow.Functions), d =>
        {
            if (d.Functions == null)
                d.Functions = new();
            d.Functions.Add(function);
        });
    }

    protected virtual async Task OnStatePropertyChangedAsync(StateDefinition state)
    {
        if (this.Workflow == null)
            return;
        await this.OnPropertyChangedAsync(nameof(Workflow.States), _ => { });
    }

    protected virtual async Task OnAutoGenerateIdChanged(bool autoGenerate)
    {
        this.autoGenerateId = autoGenerate;
        if (this.autoGenerateId)
            await this.OnPropertyChangedAsync(nameof(Workflow.Name), w => w.Id = w.Name.Slugify("-").ToLowerInvariant());
    }

    protected virtual async Task OnNameChangedAsync(string? name)
    {
        if (this.Workflow == null)
            return;
        await this.OnPropertyChangedAsync(nameof(Workflow.Name), w =>
        {
            w.Name = name;
            if (autoGenerateId && !string.IsNullOrWhiteSpace(name))
                w.Id = name.Slugify("-").ToLowerInvariant();
        });
    }

    protected virtual async Task OnPropertyChangedAsync(string property, Action<WorkflowDefinition> patchAction)
    {
        if (this.Workflow == null)
            return;
        patchAction(this.Workflow);
        await this.OnPropertyChanged.InvokeAsync(property);
    }

    private bool disposed;
    protected virtual void Dispose(bool disposing)
    {
        if (!this.disposed)
        {

            this.disposed = true;
        }
    }

    public void Dispose()
    {
        this.Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }

}
