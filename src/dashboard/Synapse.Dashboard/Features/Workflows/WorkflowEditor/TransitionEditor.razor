@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

<table class="table table-striped">
    <tbody>
        <tr>
            <td>Next state</td>
            <td>
                <StateSelector
                    States="Workflow.States.Except(ForbiddenTransitions).ToList()"
                    Selected="transitionTo"
                    OnChange="OnStateSelectedAsync" />
            </td>
        </tr>
    </tbody>
</table>

@code {

    [CascadingParameter] public WorkflowDefinition Workflow { get; set; } = null!;

    [Parameter] public List<StateDefinition> ForbiddenTransitions { get; set; } = new();

    [Parameter] public TransitionDefinition Transition { get; set; } = new();

    [Parameter] public EventCallback<WorkflowOutcome> OnChange { get; set; }

    private StateDefinition? transitionTo;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.Transition == null)
            this.Transition = new();
        else
            this.transitionTo = this.Workflow.GetState(this.Transition.NextState);
    }

    protected virtual async Task OnStateSelectedAsync(StateDefinition state)
    {
        this.transitionTo = state;
        this.Transition.NextState = state?.Name!;
        this.StateHasChanged();
        await this.OnChange.InvokeAsync(new(WorkflowOutcomeType.Transition, this.Transition.NextState));
    }

}
