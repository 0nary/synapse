@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

@if(dataCase != null)
{
    <table class="table table-striped">
        <tbody>
            <tr>
                <td>Name</td>
                <td>
                    <input type="text" value="@dataCase.Name" required placeholder="My default case" title="The name of the case" class="form-control"
                    @onchange="async e => await OnChangeAsync(c => c.Name = (string)e.Value!)"/>
                </td>
            </tr>
            <tr>
                <td>Outcome</td>
                <td>
                    <OutcomeEditor
                    ForbiddenTransitions="new(){ this.state }"
                    Outcome="dataCase.GetOutcome()"
                    OnChange="async e => await OnChangeAsync(c => c.SetOutcome(e))"/>
                </td>
            </tr>
        </tbody>
    </table>
}

@code {
    [CascadingParameter] public WorkflowDefinition Workflow { get; set; } = null!;

    private SwitchStateDefinition? state;
    [Parameter] public SwitchStateDefinition? State { get; set; }

    private DefaultCaseDefinition? dataCase;
    [Parameter] public DefaultCaseDefinition? DataCase { get; set; }

    [Parameter] public EventCallback<DefaultCaseDefinition?> OnChange { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.dataCase != this.DataCase)
            this.dataCase = this.DataCase;
        if (this.state != this.State)
            this.state = this.State;
    }

    protected virtual async Task OnChangeAsync(Action<DefaultCaseDefinition>? patch)
    {
        if (this.dataCase == null)
            return;
        if (patch != null)
            patch(this.dataCase);
        await this.OnChange.InvokeAsync(this.dataCase);
        this.StateHasChanged();
    }

}
