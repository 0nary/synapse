@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@using Neuroglia.Serialization
@using Newtonsoft.Json
@using Synapse.Dashboard.Services
@namespace Synapse.Dashboard
@inject IMonacoEditorHelper MonacoEditorHelper
@inject IJsonSerializer JsonSerializer
@inject IYamlConverter YamlConverter

<PreferedLanguageSelector PreferedLanguageChange="ToggleLanguage" />
<MonacoEditor @ref="editor"
    CssClass="pxh-150"
    ConstructionOptions="MonacoEditorHelper.GetStandaloneEditorConstructionOptions()"
    OnDidInit="OnEditorInit"
    OnDidChangeModelContent="OnInputChangedAsync"/>

@code {
    private DynamicObject? obj;
    [Parameter] public DynamicObject? Object { get; set; }
    [Parameter] public EventCallback<DynamicObject?> OnChange { get; set; }

    private MonacoEditor? editor;
    private string? rawObject = "";
    private bool updating = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.obj != this.Object) {
            this.obj = this.Object;
            this.rawObject = await this.FormatValueAsString(this.Object)! ?? "";
            if (this.editor != null)
            {
                await this.OnEditorInit(this.editor);
            }
        }
    }

    protected virtual async Task ToggleLanguage(string language)
    {
        string text = await this.editor!.GetValue();
        try
        {
            if (language == PreferedLanguage.YAML)
            {
                this.rawObject = await this.YamlConverter.JsonToYaml(text);
            }
            else
            {
                this.rawObject = await this.YamlConverter.YamlToJson(text);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            await this.MonacoEditorHelper.ChangePreferedLanguage(language == PreferedLanguage.JSON ? PreferedLanguage.YAML : PreferedLanguage.JSON);
        }
        await this.OnEditorInit(this.editor);
        this.StateHasChanged();
    }

    protected async Task OnEditorInit(MonacoEditorBase editorBase) 
    {
        this.updating = true;
        var model = await this.editor!.GetModel();
        await MonacoEditorBase.SetModelLanguage(model, this.MonacoEditorHelper.PreferedLanguage);
        await this.editor!.SetValue(this.rawObject);
        this.updating = false;
    }

    protected async Task OnInputChangedAsync(ModelContentChangedEvent e)
    {
        if (!this.updating) {
            var text = await this.editor!.GetValue();
            if (this.MonacoEditorHelper.PreferedLanguage == PreferedLanguage.YAML)
                text = await this.YamlConverter.YamlToJson(text);
            try
            {
                this.obj = await this.JsonSerializer.DeserializeAsync<DynamicObject>(text);
                await this.OnChange.InvokeAsync(this.obj);
            }
            catch (Exception ex) {}
        }
    }

    protected async Task<string>? FormatValueAsString(DynamicObject? value) 
    {
        if (value == null)
            return "";
        var text = JsonConvert.SerializeObject(value, Formatting.Indented);
        if (this.MonacoEditorHelper.PreferedLanguage == PreferedLanguage.YAML)
            text = await this.YamlConverter.JsonToYaml(text);
        return text;
    }

}
