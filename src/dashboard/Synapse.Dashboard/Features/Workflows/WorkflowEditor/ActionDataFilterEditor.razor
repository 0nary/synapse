@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

<table class="table table-striped">
    <tbody>
        <tr>
            <td>From state data</td>
            <td>
                <JqExpressionEditor
                    Expression="@dataFilter?.FromStateData"
                    placeholder="${ . }"
                    title="A runtime expression used to filter the state data that can be used by the action"
                    class="form-control"
                    OnChange="async e => await OnChangeAsync(f => f.FromStateData = e)"
                />
            </td>
        </tr>
        <tr>
            <td>Use results</td>
            <td>
                <input type="checkbox" placeholder="0.1.0" required checked="@(dataFilter == null ? true : dataFilter.UseResults)" value="@dataFilter?.UseResults" title="Indicates whether or not to use the action's output'" class="form-check-input"
                @onchange="async e => await OnUseResultsChangedAsync((bool)e.Value!)"/>
            </td>
        </tr>
        <tr>
            <td>Results</td>
            <td>
                <JqExpressionEditor
                    Expression="@dataFilter?.Results"
                    disabled="@(!dataFilter?.UseResults)"
                    placeholder="${ . }"
                    title="A runtime expression used to filter the action's output'"
                    class="form-control"
                    OnChange="async e => await OnChangeAsync(f => f.Results = e)"
                />
            </td>
        </tr>
        <tr>
            <td>To state data</td>
            <td>
                <JqExpressionEditor
                    Expression="@dataFilter?.ToStateData" 
                    disabled="@(!dataFilter?.UseResults)"
                    placeholder="${ . }"
                    title="A runtime expression used to select state data elements to which the action's output should be merged"
                    class="form-control"
                    OnChange="async e => await OnChangeAsync(f => f.ToStateData = e)"
                />
            </td>
        </tr>
    </tbody>
</table>

@code {
    [CascadingParameter] public WorkflowDefinition Workflow { get; set; } = null!;

    private ActionDataFilterDefinition? dataFilter;
    [Parameter] public ActionDataFilterDefinition? DataFilter { get; set; }

    [Parameter] public EventCallback<ActionDataFilterDefinition> OnChange { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.DataFilter == this.dataFilter)
            return;
        this.dataFilter = this.DataFilter;
    }

    protected virtual async Task OnUseResultsChangedAsync(bool useResults)
    {
        if (this.dataFilter == null)
            this.dataFilter = new();
        await this.OnChangeAsync(f =>
        {
            f.UseResults = useResults;
            if (!useResults)
            {
                f.Results = null;
                f.ToStateData = null;
            }
        });
    }

    protected virtual async Task OnChangeAsync(Action<ActionDataFilterDefinition> patch)
    {
        if (this.dataFilter == null)
            this.dataFilter = new();
        patch(this.dataFilter);
        if (string.IsNullOrWhiteSpace(this.dataFilter.FromStateData)
        && this.dataFilter.UseResults
        && string.IsNullOrWhiteSpace(this.dataFilter.Results)
        && string.IsNullOrWhiteSpace(this.dataFilter.ToStateData))
            this.dataFilter = null;
        await this.OnChange.InvokeAsync(this.dataFilter);
        this.StateHasChanged();
    }

}
