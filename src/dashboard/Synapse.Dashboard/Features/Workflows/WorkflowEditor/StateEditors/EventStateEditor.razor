@* 
    Copyright © 2022-Present The Synapse Authors

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard

@if(state != null)
{
    <table class="table table-striped">
        <tbody>
            <tr>
                <td>Exclusive</td>
                <td>
                    <input type="checkbox" value="@state.Exclusive" checked="@state.Exclusive" title="Determines whether or not only one trigger should be fired for the state to complete" class="form-check-input" 
                    @onchange="async e => await OnChangedAsync(s => s.Exclusive = (bool)e.Value!)"/>
                </td>
            </tr>
            <tr>
                <td colspan="2"><h6>Triggers</h6></td>
            </tr>
            <tr>
                <td colspan="2">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Events</th>
                                <th>Action execution mode</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                             @foreach (var trigger in state.Triggers)
                                {
                                    <ExpandableDataRow>
                                        <Header>
                                            <td>@string.Join(' ', trigger.Events)</td>
                                            <td><span class="badge bg-secondary text-white">@EnumHelper.Stringify(trigger.ActionMode)</span></td>
                                            <td>@trigger.Actions.Count</td>
                                            <td class="d-flex justify-content-end"><button @onclick="async () => await OnChangedAsync(s => s.Triggers.Remove(trigger))" @onclick:stopPropagation="true" class="btn btn-outline-dark"><small class="bi bi-trash"></small></button></td>
                                        </Header>
                                        <Body>
                                            <td colspan="5">
                                                <EventStateTriggerEditor 
                                                Trigger="@trigger" 
                                                OnChange="async _ => await OnChangedAsync(_ => {})" />
                                            </td>
                                        </Body>
                                    </ExpandableDataRow>
                                }
                        </tbody>
                    </table>
                    <button class="btn btn-block btn-primary text-white w-100" @onclick="OnCreateTriggerAsync">Create new trigger</button>
                </td>
            </tr>
        </tbody>
    </table>
}

@code {

    private EventStateDefinition? state = null;
    [Parameter] public EventStateDefinition? State { get; set; }

    [Parameter] public EventCallback OnChange { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.state != this.State)
            this.state = this.State;
    }

    protected virtual async Task OnCreateTriggerAsync()
    {
        if (this.state == null)
            return;
        if (this.state.Triggers == null)
            this.state.Triggers = new();
        var e = new EventStateTriggerDefinition();
        await this.OnChangedAsync(s =>
        {
            s.Triggers!.Add(e);
        });
    }

    protected virtual async Task OnChangedAsync(Action<EventStateDefinition> patch)
    {
        if (this.state == null)
            return;
        patch(this.state);
        await this.OnChange.InvokeAsync(this.state);
        this.StateHasChanged();
    }

}
