@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@inject IStyleManager StyleManager

@if (Workflow != null) 
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-2">
                <div class="card-metric info">
                    <span class="card-metric-value">@Workflow.RunningInstanceCount</span>
                    <span class="card-metric-name">Running instances</span>
                </div>
                 <div class="card-metric success">
                    <span class="card-metric-value">@Workflow.CompletedInstanceCount</span>
                    <span class="card-metric-name">Completed instances</span>
                </div>
                 <div class="card-metric danger">
                    <span class="card-metric-value">@Workflow.FaultedInstanceCount</span>
                    <span class="card-metric-name">Faulted instances</span>
                </div>
                <div class="card-metric warning">
                    <span class="card-metric-value">@Workflow.CancelledInstanceCount</span>
                    <span class="card-metric-name">Cancelled instances</span>
                </div>
            </div>
            <div class="col-md-2">
                <div class="card-metric secondary">
                    <span class="card-metric-value">@Workflow.AverageInstanceDuration</span>
                    <span class="card-metric-name">Average instance duration</span>
                </div>
                <div class="card-metric secondary">
                    <span class="card-metric-value">@Workflow.ShortestInstanceDuration</span>
                    <span class="card-metric-name">Shortest instance duration</span>
                </div>
                <div class="card-metric secondary">
                    <span class="card-metric-value">@Workflow.LongestInstanceDuration</span>
                    <span class="card-metric-name">Longest instance duration</span>
                </div>
            </div>
            <div class="col-md-8">
               <Chart Configuration="@executedInstancesChart" />
            </div>
        </div>
    </div>
}

@code {

    private ChartConfiguration executedInstancesChart = null!;

    [Parameter]
    public V1Workflow Workflow { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await this.BuildDailyExecutedInstancesChartAsync();
    }

    private async ValueTask BuildDailyExecutedInstancesChartAsync()
    {
        this.executedInstancesChart = new()
        {
            Type = ChartType.Pie,
            Data =
            {
                Labels = new()
                {
                    "Completed",
                    "Faulted",
                    "Cancelled"
                },
                Datasets = new() 
                { 
                    new ChartDataset()
                    {
                        Data = new()
                        {
                            Workflow.CompletedInstanceCount,
                            Workflow.FaultedInstanceCount,
                            Workflow.CancelledInstanceCount
                        },
                        BackgroundColor = new()
                        {
                            await this.StyleManager.GetVariableValueAsync("--bs-success"),
                            await this.StyleManager.GetVariableValueAsync("--bs-danger"),
                            await this.StyleManager.GetVariableValueAsync("--bs-warning")
                        }
                    }
                }
            }
        };
    }

}
