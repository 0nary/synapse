@* 
    Copyright © 2022-Present The Synapse Authors
    <p>
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    <p>
    http://www.apache.org/licenses/LICENSE-2.0
    <p>
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*@

@namespace Synapse.Dashboard
@using Newtonsoft.Json
@using System.Text
@inject IMonacoEditorHelper MonacoEditorHelper
@if(Activities != null)
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col">Type</th>
                <th scope="col">Name</th>
                <th scope="col">Status</th>
                <th scope="col">Started At</th>
                <th scope="col">Executed At</th>
                <th scope="col">Duration</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var activity in Activities)
            {
                <ExpandableDataRow @ref="rows[Activities.IndexOf(activity)]">
                    <Header>
                        <td>
                            @if (rows[Activities.IndexOf(activity)].IsExpanded)
                            {
                                <span class="oi oi-chevron-top"></span>
                            } else
                            {
                                <span class="oi oi-chevron-bottom"></span>
                            }
                        </td>
                        <td>@activity.Type</td>
                        <td>
                            @switch(activity.Type)
                            {
                                case(V1WorkflowActivityType.State):
                                    @activity.Metadata[V1WorkflowActivityMetadata.State]
                                    break;
                                case(V1WorkflowActivityType.Action):
                                    @activity.Metadata[V1WorkflowActivityMetadata.Action]
                                    break;
                                case(V1WorkflowActivityType.Branch):
                                    @activity.Metadata[V1WorkflowActivityMetadata.Branch]
                                    break;
                            }
                        </td>
                        <td>@activity.Status</td>
                        <td>@activity.StartedAt?.ToString("MM/dd/yyyy, HH:mm")</td>
                        <td>@activity.ExecutedAt?.ToString("MM/dd/yyyy, HH:mm")</td>
                        <td>@(activity.Duration?.ToString() ?? "")</td>
                    </Header>
                    <Body>
                    <td colspan="7">
                        <div class="row">
                            @if (activity.Type == V1WorkflowActivityType.State)
                            {
                                <div class="col">
                                    <MonacoDiffEditor                                                    
                                        CssClass="monaco-small"
                                        ConstructionOptions="MonacoEditorHelper.GetDiffEditorConstructionOptions()"
                                        OnDidInit="OnActivityDiffEditorDidInit(JsonConvert.SerializeObject(
                                            activity.Input, Formatting.Indented), 
                                            activity.Output != null ? JsonConvert.SerializeObject(activity.Output, Formatting.Indented) : JsonConvert.SerializeObject(activity.Error, Formatting.Indented)
                                        )"
                                    />
                                </div>
                            } 
                            else {
                                    <div class="col-6">
                                    <p class="font-weight-bold">Input</p>
                                    @if(activity.Input != null)
                                    {
                                        <MonacoEditor 
                                            CssClass="monaco-small"
                                            ConstructionOptions="MonacoEditorHelper.GetStandaloneEditorConstructionOptions(JsonConvert.SerializeObject(activity.Input, Formatting.Indented), true)" />
                                    }
                                </div>
                                <div class="col-6">
                                    <p class="font-weight-bold">Output</p>
                                    @if(activity.Output != null)
                                    {
                                        <MonacoEditor 
                                            CssClass="monaco-small"
                                            ConstructionOptions="MonacoEditorHelper.GetStandaloneEditorConstructionOptions(JsonConvert.SerializeObject(activity.Output, Formatting.Indented), true)" />
                                    }
                                    @if(activity.Error != null)
                                    {
                                        <MonacoEditor                                                 
                                            CssClass="monaco-small"
                                            ConstructionOptions="MonacoEditorHelper.GetStandaloneEditorConstructionOptions(JsonConvert.SerializeObject(activity.Error, Formatting.Indented), true)" />
                                    }
                                </div>
                            }
                        </div>
                    </td>
                    </Body>
                </ExpandableDataRow>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public List<V1WorkflowActivity> Activities { get; set; } = new List<V1WorkflowActivity>();
    
    protected Dictionary<int, ExpandableDataRow> rows = new Dictionary<int, ExpandableDataRow>();    

    protected Func<MonacoEditorBase, Task> OnActivityDiffEditorDidInit(string original, string modified)
    {
        return async (MonacoEditorBase editor) =>
        {
            var diffEditor = (MonacoDiffEditor)editor;    
            TextModel inputModel = await MonacoEditorBase.CreateModel("", "json");
            TextModel outputModel = await MonacoEditorBase.CreateModel("", "json");
            if (!string.IsNullOrWhiteSpace(original))
            {
                inputModel = await MonacoEditorBase.CreateModel(original, "json");
            }
            if (!string.IsNullOrWhiteSpace(modified))
            {
                outputModel = await MonacoEditorBase.CreateModel(modified, "json");
            }
            await diffEditor.SetModel(new DiffEditorModel
            {
                Original = inputModel,
                Modified = outputModel
            });
        };
    }
}
