<g class="cluster @Cluster.CssClass" transform="translate(@Cluster.X.ToInvariantString(), @Cluster.Y.ToInvariantString())">
    <g class="cluster-shape">
        @if (Cluster.Shape == NodeShape.Circle)
        {
            <Circle BBox="Cluster.BBox" />
        }
        else if (Cluster.Shape == NodeShape.Ellipse)
        {
            <Ellipse BBox="Cluster.BBox" />
        }
        else
        {        
            <Rectangle BBox="Cluster.BBox" RadiusX="Cluster.RadiusX" RadiusY="Cluster.RadiusY" />
        }
    </g>
    @if (!string.IsNullOrWhiteSpace(Cluster.Label)) {
        <g class="label">
            <foreignObject 
                x="@(Cluster.BBox!.X.ToInvariantString())"
                y="@((Cluster.BBox!.Height / 2).ToInvariantString())" 
                width="@Cluster.BBox!.Width.ToInvariantString()" 
                height="@Constants.LabelHeight"
            >
                <div>@Cluster.Label</div>
            </foreignObject>
        </g>
    }
    @if (Graph.ShowConstruction) {
        <circle cx="0" cy="0" r="1" fill="red"></circle>
    }
</g>

@code {
    [CascadingParameter]
    public virtual IGraphViewModel Graph { get; set; } = null!;

    [Parameter]
    public virtual IGraphElement Element { get; set; } = null!;

    protected virtual IClusterViewModel Cluster => (IClusterViewModel)this.Element;
}
