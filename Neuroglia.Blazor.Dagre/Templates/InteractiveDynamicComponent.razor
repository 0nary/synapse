<g
    @ref="elementReference"
    @onmouseenter="OnMouseEnter"
    @onmouseleave="OnMouseLeave"
    @onmousemove="OnMouseMove"
    @onmousedown="OnMouseDown"
    @onmousedown:stopPropagation
    @onmouseup="OnMouseUp"
    @onmouseup:stopPropagation
>
    <CascadingValue Value="Graph">
        <DynamicComponent Type="Type" Parameters="Parameters" />
    </CascadingValue>
</g>
@code {
    [CascadingParameter]
    public virtual IGraphViewModel Graph { get; set; } = null!;

    [Parameter]
    public virtual Type Type { get; set; } = null!;

    [Parameter]
    public virtual IDictionary<string, object> Parameters { get; set; } = null!;

    protected ElementReference elementReference;

    protected virtual IGraphElement Element => (IGraphElement)this.Parameters["Element"];

    protected virtual async Task OnMouseEnter(MouseEventArgs e) => await this.Graph.OnMouseEnterAsync(this.elementReference, e, this.Element);

    protected virtual async Task OnMouseLeave(MouseEventArgs e) => await this.Graph.OnMouseLeaveAsync(this.elementReference, e, this.Element);

    protected virtual async Task OnMouseDown(MouseEventArgs e) => await this.Graph.OnMouseDownAsync(this.elementReference, e, this.Element);

    protected virtual async Task OnMouseMove(MouseEventArgs e) => await this.Graph.OnMouseMoveAsync(this.elementReference, e, this.Element);

    protected virtual async Task OnMouseUp(MouseEventArgs e) => await this.Graph.OnMouseUpAsync(this.elementReference, e, this.Element);
}
