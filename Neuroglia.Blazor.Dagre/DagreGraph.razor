@using Microsoft.AspNetCore.Components.Web
@inject DagreService DagreService

@if (Graph != null) {
    <CascadingValue Value="Graph">
        <svg 
            class="dagre-graph" 
            width="@(Graph.Width?.ToString() ?? "100%")" 
            height="@(Graph.Height?.ToString() ?? "100%")"
            @onmousedown="OnMouseDown"
            @onmouseup="OnMouseUp"
            @onmousemove="OnMouseMove"
        >
            <defs>
                @foreach(var def in Graph.SvgDefinitionComponents)
                {
                    <DynamicComponent @key="def" Type="def" />
                }
            </defs>
            <g class="graph">
                <g class="clusters">
                    @foreach(var cluster in Graph.AllClusters.Values)
                    {
                        if (cluster != null)
                        {
                            <InteractiveDynamicComponent @key="cluster" Type="Graph.GetComponentType(cluster)" Parameters="GetComponentParameter(cluster)" />
                        }
                    }
                </g>
                <g class="edges">
                    @foreach(var edge in Graph.Edges.Values)
                    {
                        if (edge != null)
                        {
                            <DynamicComponent @key="edge" Type="Graph.GetComponentType(edge)" Parameters="GetComponentParameter(edge)" />
                        }
                    }
                </g>
                <g class="nodes">
                    @foreach(var node in Graph.AllNodes.Values)
                    {
                        if (node != null)
                        {
                            <InteractiveDynamicComponent @key="node" Type="Graph.GetComponentType(node)" Parameters="GetComponentParameter(node)" />
                        }
                    }
                </g>
            </g>
        </svg>
    </CascadingValue>
}

@code {
    [Parameter]
    public IDagreGraphOptions? Options { get; set; }

    [Parameter]
    public IGraphViewModel? Graph { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (this.Graph != null)
        {
            await this.DagreService.ComputePositions(this.Graph, this.Options);
            Console.WriteLine(await this.DagreService.Serialize(this.Graph.DagreGraph));
            //Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(this.Graph));
        }
    }

    protected virtual Dictionary<string, object> GetComponentParameter(IGraphElement element)
    {
        var parameters = new Dictionary<string, object>()
        {
            { "Element", element }
        };
        return parameters;
    }

    private void OnMouseDown(MouseEventArgs e) => this.Graph?.OnMouseDown(null, e);

    private void OnMouseMove(MouseEventArgs e) => this.Graph?.OnMouseMove(null, e);

    private void OnMouseUp(MouseEventArgs e) => this.Graph?.OnMouseUp(null, e);
}