@inject DagreService DagreService

@if (Graph != null) {
    <svg class="dagre-graph" width="@(Graph.Width?.ToString() ?? "100%")" height="@(Graph.Height?.ToString() ?? "100%")">
        <defs>
            @foreach(var def in Graph.SvgDefinitionComponents)
            {
                <DynamicComponent Type="def" />
            }
        </defs>
        <g class="graph">
            <g class="clusters">
                @foreach(var cluster in Graph.AllClusters.Values)
                {
                    if (cluster != null)
                    {
                        <DynamicComponent Type="Graph.GetComponentType(cluster)" Parameters="GetComponentParameter(cluster)" />
                    }
                }
            </g>
            <g class="edges">
                @foreach(var edge in Graph.Edges.Values)
                {
                    if (edge != null)
                    {
                        <DynamicComponent Type="Graph.GetComponentType(edge)" Parameters="GetComponentParameter(edge)" />
                    }
                }
            </g>
            <g class="nodes">
                @foreach(var node in Graph.AllNodes.Values)
                {
                    if (node != null)
                    {
                        <DynamicComponent Type="Graph.GetComponentType(node)" Parameters="GetComponentParameter(node)" />
                    }
                }
            </g>
        </g>
    </svg>
}

@code {
    [Parameter]
    public IDagreGraphOptions? DagreGraphOptions { get; set; }

    [Parameter]
    public IGraphViewModel? Graph { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (this.Graph != null)
        {
            await this.DagreService.ComputePositions(this.Graph, this.DagreGraphOptions);
            Console.WriteLine(await this.DagreService.Serialize(this.Graph.DagreGraph));
            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(this.Graph));
        }
    }

    protected virtual Dictionary<string, object> GetComponentParameter(IGraphElement element)
    {
        var parameters = new Dictionary<string, object>()
        {
            { "Element", element }
        };
        return parameters;
    }

}